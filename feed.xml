<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://lewinz.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lewinz.org/" rel="alternate" type="text/html" /><updated>2021-08-15T13:57:14+08:00</updated><id>https://lewinz.org/feed.xml</id><title type="html">阿嫂</title><subtitle>阿嫂个人博客</subtitle><author><name>Lewin</name></author><entry><title type="html">linux 与 freeBSD</title><link href="https://lewinz.org/2021/08/15/linux-freebsd/" rel="alternate" type="text/html" title="linux 与 freeBSD" /><published>2021-08-15T00:00:00+08:00</published><updated>2021-08-15T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/15/linux-freebsd</id><content type="html" xml:base="https://lewinz.org/2021/08/15/linux-freebsd/">&lt;p&gt;传说中 FreeBSD 比 linux 稳定，大型网站几乎都建立在 FreeBSD 系统上，我一直疑惑难道 linux 是否真的不能做大型网站。于是用 netcraft 网站做了个测试：&lt;br /&gt;
&lt;a href=&quot;http://toolbar.netcraft.com/site_report?url=www.phpchina.com&quot;&gt;http://toolbar.netcraft.com/site_report?url=www.phpchina.com&lt;/a&gt;&lt;br /&gt;
按照上面的链接你就可以查询任何一个网站的服务器架构，当然，可信度和准确度我不能保证。下面是我测试的案例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;www.phpchina.com 清一色 linux;&lt;/li&gt;
  &lt;li&gt;www.tencent.com 清一色 linux;&lt;/li&gt;
  &lt;li&gt;www.qq.com 清一色 linux;&lt;/li&gt;
  &lt;li&gt;www.taobao.com linux;&lt;/li&gt;
  &lt;li&gt;www.ebay.com.cn 查询显示 OS 清一色 linux，WebServer 清一色 IIS，令人费解；&lt;/li&gt;
  &lt;li&gt;www.alibaba.com 清一色 linux;&lt;/li&gt;
  &lt;li&gt;www.bokee.com 清一色的 linux；&lt;/li&gt;
  &lt;li&gt;www.google.com 清一色 linux;&lt;/li&gt;
  &lt;li&gt;www.pconline.com.cn linux;&lt;/li&gt;
  &lt;li&gt;www.yninfo.com 清一色的 linux;&lt;/li&gt;
  &lt;li&gt;www.tom.com 清一色 Debian;&lt;/li&gt;
  &lt;li&gt;www.cctv.com linux+sun 的服务器；&lt;/li&gt;
  &lt;li&gt;www.126.com 清一色 linux&lt;/li&gt;
  &lt;li&gt;www.163.com 清一色 linux，大家或许都认为网易是使用 FreeBSD 的，但 163/126 就全部用上了 linux，令人费解。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看来用 linux 做大站的也不少啊！！！谁说 linux 不能做大站呢？&lt;/p&gt;

&lt;p&gt;另外又发现两个奇怪的东东：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;www.ebay.com 居然清一色的 win2000!!!&lt;/li&gt;
  &lt;li&gt;http://www.myspace.com 全美访问量第一，居然也清一色的 win2003;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我印象中，大型网站是压根不能用 windos 系统的。但这两个案例给我的理论一个有力的回击：** 系统稳定与否，关键还是在人！**&lt;/p&gt;

&lt;p&gt;无论是 Windows 还是 FreeBSD 还是 Linux 都可以做大型网站，只要人足够牛 X 就行。这里不谈 windows 了，还是从大家口水仗打得最厉害的 linux 和 freebsd 分析分析吧。&lt;/p&gt;

&lt;p&gt;首先说明一点：为什么不拿 linux 和 windows 比较，而只是和 freebsd 比较呢？答案在于 linux 或是 freebsd 都感觉到了对方带来的压力，都认定对方是自己的竞争对手。既然称得上是对手，自然是各有所长，难分轩轾，谁也不能把谁压倒罢了。&lt;/p&gt;

&lt;p&gt;论坛里争论 FreeBSD 和 linux 谁谁更好，其实是从一个静态的角度来看的，在某个特定时间里，FreeBSD 或许比 linux 更稳定，linux 或 许比 FreeBSD 更快捷，但两家都在动态发展，没有谁永远领先，没有谁永远落后，FreeBSD 稳定的特性，Linux2.6 可以超越它；而 linux 快捷的优势，FreeBSD 也会迅速居上。我就不信，linus 和他的黑客团队在技术上会输给学院派的 FreeBSD 团队？或者 FreeBSD 的高手们比不上一群黑客，？他们谁都可以暂时领先，谁都可以暂时落后，但谁都不是吃干饭的！&lt;/p&gt;

&lt;p&gt;目前流行这么一种传说：linux 和 freebsd 内核性能上相比：linux2.2 比 freebsd 要差，linux2.4 和 freebsd 难分伯仲， 而 linux2.6 比 freebsd 好得多。这里 freebsd 被静态化了，以一个动态发展的 linux 去比较某个固定版本的 freebsd，显然是有失 公平的。有道是：士别三日，即更刮目相看，更何况是技术日新月异的 IT 行业！&lt;/p&gt;

&lt;p&gt;又有这么一种说法：LINUX 被黑的多而 FreeBSD 被黑的少，盖出于安全性较逊？这也是无稽之谈，用 liunx 的人基数比 freebsd 大，菜鸟自然也就更多了。系统安不安全关键在人，如果你不信，可以尝试去黑一下 www.ebay.com 或 www.myspace.com，他们的服务器可都是 windows 哟。&lt;/p&gt;

&lt;p&gt;其实两家最根本的差别不在技术，而在于设计理念：linux 不求最稳，但求最新；FreeBSD 不求最新，只求最稳 —— 这样说也许不对，但也能反映一些问题。&lt;/p&gt;

&lt;p&gt;我对 FreeBSD 与 Linux 比较的最终结论是：谁好谁稳定都只是暂时的，两家的存在状态，是一个 “既生瑜何生亮” 的问题，在长久的发展过程中，技术 上的常胜将军并不存在，双方只有此消彼长，各领风骚。至于大家为什么非要证明 FreeBSD 比 Linux 好或 Linux 比 FreeBSD 好，我想程序员普 遍都喜欢追求完美，非要用最好最完美的系统才甘心吧！&lt;/p&gt;

&lt;p&gt;FreeBSD 和 Linux 我都用过，不在超大型应用中，很难感受两者的差别。个人选择的 linux，考虑到使用 linux 的人比较多，商机自然也就更多吧，钱在哪眼光就看哪，至少 linux 的就业机会比 FreeBSD 多。当然，这是非技术因素的考虑了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;从 linux 迁移到 freebsd&lt;/p&gt;

&lt;p&gt;FreeBSD 和各种 Linux 发行版一样，是一种免费的 Unix 类操作系统。由于 FreeBSD 的推出稍晚于 Linux，因此国内介绍 FreeBSD 的文章较少，而且 由于某些煤体不负责任的推波助澜，Linux 被过分夸大、神化了。实际上，很多大网站都在用 FreeBSD，如 Yahoo，甚至包括 Microsoft 的 Hotmail（Microsoft 收购 Hotmail 4 年了，但直到去年 11 月 Microsoft 才宣布 Hotmail 向 Windows/IIS 迁移，而且，至今 Hotmail 主机群中依然包括 FreeBSD Boxes，可见 Microsoft 对于 Windows 并不是真的很放心，这一事实也证明了 FreeBSD 引以为耀的稳定性）等等。和 Linux 各种混乱 不堪的发行版相比，FreeBSD 只有唯一的版本，同时，FreeBSD 关注的是操作系统的稳定性、性能和品质，适合作为服务器的操作系统。当然，对于选 择 FreeBSD 还是某种 Linux 发行版本作为操作系统，不同的人肯定有不同的偏爱，但译者认为，FreeBSD 作为服务器来说，比 Linux 更好一 些，当然，如果不考虑开发成本，仅仅考虑运行效率，也更远好于 Windows。原因很多，有机会的话，我会在今后的文章中一一提到。&lt;/p&gt;

&lt;p&gt;需要说明的是，译者不认为最近一两年之内免费操作系统阵营能够和 Microsoft 等商业系统阵营决出胜负高下，因为 他们的操作系统的设计理念存在差别。我自己很喜欢命令行方式的操作，然而在图形界面方面，X Window 的效率是很难超过 Windows 的，这是因为 X 是以用户模式运行图形界面，而 Windows 则是以核心模式运行，这实际上就造成了 Unix 类 操作系统在图形界面上的先天不足。而且，由于 Microsoft 的产品是要卖钱的，因此它为了维护自己的市场地位，会为客户提供比较好的服务，而免费 Unix 操作系统在这一点则比较困难，而且，它对用户的要求较高。在这里我不想给出一个确切的建议，如桌面操作系统应该选择什么，服务器操作系统应该选择 什么，一切要从实际情况出发。请大家注意这样的事实：专业人员维护的 Windows 服务器的安全性未必就 差，非专业人员维护的 * nix 服务器的安全性也肯定是无法接受。在抨击 Nimda 横行的同时，也请注意，Microsoft 早在 Nimda 出现前半年的时 候就已经推出了预防性的补丁；*nix 一样也有非常让人难堪的安全问题，同样的，他们也会及时推出补丁，因此，绝大多数服务器的安全问题是由于管理员的疏 忽造成的。选择操作系统之前，最好是先想好：什么样的配置对于您最有利，请考虑整体拥有成本 (TCO) 而不仅仅是操作系统的价格。目前很多 网站采用的、非常流行的 Windows 2000+Apache+Php+MySQL 组合实际上就同时牺牲了 IIS 开发周期短和 Apache+Unix 组合相对比较容易定制的优点，可谓竹篮打水 一场空。&lt;/p&gt;

&lt;p&gt;这篇文章比较客观地对 FreeBSD 和 Linux 进行了对比，值得一读，所以我决定把它介绍给国内的读者。总之，Think different，决定选择什么东西之前，最好先尝试一番，特别是那些同类产品。&lt;/p&gt;

&lt;p&gt;** 简介 **：即使是和 IT 不沾什么边的企业信息技术人士大概也都听说过 Linux。有些人可能用过，或正在使用它，原因五花八门，有的甚至只是为了看看那 些大肆吹嘘它的人到底说的是不是实话。然而，GNU/Linux 并不是可用的唯一一个 “free” 的 Unix 类操作系统。FreeBSD 和它的堂兄弟， OpenBSD 和 NetBSD 都是商业 UNIX 版本 ——Berkeley Software Distribution 免费的分支产品。这篇文章让您更多地了解 FreeBSD，也帮助您更轻松地进行潜在的迁移过程。&lt;/p&gt;

&lt;p&gt;与 Linux 使用的 GPL 授权不同，BSD 家族的操作系统使用 BSD 风格的授权。用一句话来概括两种授权的不同就是，GPL 要求源代码的任何衍生物也是公有的，并且使用 GPL 授权，而 BSD 授权没有这个要求。&lt;/p&gt;

&lt;p&gt;FreeBSD 和主要的 Linux 发行版本的工作方式有一定区别。这篇文章将告诉你我自己认为在把我的桌面操作系统由 Linux 切换到 FreeBSD 时的收获。&lt;/p&gt;

&lt;p&gt;当然，肯定会有人坚持这样的观点：Linux 指的仅仅是操作系统的内核，而不是其他什么东西。在你的 Red Hat 或 Debian 匣子中，每天使用的应用程序是由相应的发行版本提供的。而 FreeBSD，则包括了操作系统内核和整个操作系统中的那些基本的应用程 序，例如复制、移动文件的命令等等。这一区别的结果是，Linux 由不同的发行版本，例如 Mandrake, SuSE, Debian 和 Slackware。任何使用过 Mandrake 和 Debian 的人都会告诉你这两套发行版本的世界有多么大的区别。相反，只有一个 FreeBSD，我的 FreeBSD 和你拥有的 FreeBSD 是完全一样的，只要他们的版本一样。&lt;/p&gt;

&lt;p&gt;三中最主要的 Linux 发行版本，Red Hat、Mandrake 和 SuSE 使用了 RPM 安装包管理器。RPM 处理安装、升级、卸载，并检查安装在这些操作系统上的应用程序依赖关系。虽然在安装 程序之前检查依赖关系的错误，但 RPM 遗留了比我们期待的更多的问题。例如，它不能自动地下载它需要的其他 RPM。我知道至少 3 个项目试图解决这个问题， urpmi, Debian 的 apt-get，当然，附带说一句，只是一个 “仅 Debian 采用” 的特性，而且是一个 RPM 和 apt-get 的混血儿。所以，除非你打算 是用上面的方法，否则你将不得不手工寻找、下载所需要的 RPM。听起来很简单么？直到你用 RPM 安装 Gnome 或者升级 Xfree 的时候你才会知道事情有 多么严重。而且，即使你找到了正确的 RPM，如果他们是为 SuSE 设计的，而你运行的是 Red Hat，那么你的麻烦课就大了。&lt;/p&gt;

&lt;p&gt;每一个 Linux 发行版本都存在一些差异，而它们之间最大的差异则在于文件系统的结构。我肯定绝大多数人都听说过 SuSE 把 KDE 放到 /opt，而 Red Hat 则放到 /usr 文件夹中。更糟糕的是，RPM 不能识别从源代码中编译得到的程序。所以，如果你拥有最新编译的程序，RPM 甚至无法知道他们的存在。&lt;/p&gt;

&lt;p&gt;FreeBSD 使用 “包” 来安装、卸载和升级应用程序。‘pkg_add’命令被用于安装一个你手工下载到计算机的包。你也可以用‘-r’开关来让 它自动的从 Internet 获取，当然，也包括这个包所依赖的一切。不过，FreeBSD 包的真正美妙之处在于 “连接点”(Ports) 树。连接点树是 ——FreeBSD 包含的应用程序之间的继承关系。每一个文件夹都包含 Makefile，以及让特定应用程序能够在 FreeBSD 上正确运行所需要的补 丁。例如，如果我想安装 Apache web 服务器，我所需要做的只是 cd 到 /usr/ports/www/apache 文件夹，然后运行‘make &amp;amp;&amp;amp; make install’，然后去小吃售卖机前。如果我拥有一台速度够快的电脑，同时拥有一个足够大方的 Internet 连接，当我回来的时候 Apache 源代码 的下载、补丁、编译和安装肯定都已经做完了。连接点树也能够处理 Apache 运行依赖的那些程序，无论我用连接点树安装、手工编译，还是通过安装已经编译 好的二进制包。连接点树能够通过 $PATH 找到它需要的东西。&lt;/p&gt;

&lt;p&gt;Linux 和 FreeBSD 的另一个区别在于，对于 FreeBSD 而言，你安装的连接点或者包 99% 都会被放到 /usr/local，而在 Linux 上有时是 /usr，有时是 /opt。这可能只是一个很小的区别，但你至少可以知道你的程序安装到了 /usr/local，而不是扩散到了文件系 统的各个地方。&lt;/p&gt;

&lt;p&gt;FreeBSD 系统使用 cvsup 来保持它是最新的。一旦你建立了‘sup-file’，cvsup 将会把你本地的系统和 cvsup 服务器上的进行 比较，并且下载那些修改过的东西。你可以用它来确保你的本地连接点树和 FreeBSD 源代码都是最新的。和 Linux 不同，Linux 通常只有内核被半正 规性的下载和变异。使用 cvsup，你可以很容易地下载整个 FreeBSD 操作系统的源代码。这样做的主要理由是，它使得 FreeBSD 从一个版本升级到 另一个的过程变的简单。Cvsup 之后，你可以用 make world 来编译整个操作系统，或者编译新的操作系统内核。这些都非常的简单。&lt;/p&gt;

&lt;p&gt;处理分区的方式也有区别。Linux 将一个硬盘分为不同的分区，在这些分区中，有些又包括逻辑分去。我们常说的分区在 FreeBSD 中称为片断 (Slices)，没个片断中包括一个或多个 BSD 分去。BSD 分区在 /etc/fstab 中可以找到。&lt;/p&gt;

&lt;p&gt;也许 Linux 和 FreeBSD 的下一个最大的区别就是操作系统设计的基本理念。Linux 强调最新的操作系统特性和驱动程序（例如不开放源代码的 nVidia 图形卡驱动程序）。FreeBSD 在这些方面比较保守。他们喜欢经过时间考验和测试过的东西，甚于最新特性。他们倾向于等待主要的 bug 被修 正。对于桌面操作系统来说，如果你使用最新的硬件，追求最新的驱动程序，或那些更酷的特性，保守是 FreeBSD 的一个毛病。然而在服务器中，你肯定希望 更加稳定的代码。另外，你会把一块价值 200 美元的显示卡放到你的不包括显示器的服务器上么？&lt;/p&gt;

&lt;p&gt;另一个区别是默认安装的内容。如果你接受 SuSE 的默认安装选项，那么你至少会装上 1GB 的软件。而 FreeBSD 只是安装那些最基本的系统（注 意，我知道你会告诉 SuSE 仅仅安装‘基本系统’，但我说的是‘默认’安装）。他带给你那些最本质的东西，而你可以在以后通过连接点树安装 4000 多种应 用程序中的任何一个。几乎所有在 Linux 中运行的程序都已经被移植，并且能够正常运行于 FreeBSD，唯一的区别在于在 Linux 上，应用程序要么被 “默认安装”，要么，除非你用 Debian，你就必须手工下载它们。在 FreeBSD 上他们只是可选的，而且绝大多数过程已经被自动化了。另一些区别就 是，Linux 上默认的命令行外壳是 bash，而 FreeBSD 上则是 tcsh。&lt;/p&gt;

&lt;p&gt;对于商业应用程序，如 Oracle 或 HP Openmail，FreeBSD 提供了一个 “Linux 兼容” 层。简而言之，它让 FreeBSD 能够以接近在 Linux 上运行的速度直接运行 Linux 的二进制应用。应用程序是否能够在 FreeBSD 上全速运行完全取决于它是否真的愿意在 Linux 上运行。兼容层比模拟更进一步。需要的 Linux 库被以 二进制形式安装在 BSD 系统中。当你试图运行 Linux 程序时，FreeBSD 识别它是 Linux 程序，并简单地指明它需要的 Linux 运行库的位置。同 时，FreeBSD 夜提供了商业 BSD、NetBSD、OpenBSD 和 SCO 的模拟。每种不同的操作系统获得不同的支持，其中最完善的是商业 BSD、 NetBSD 和 OpenBSD。&lt;/p&gt;

&lt;p&gt;尽管 BSD 开发者更重视软件的品质和数量，但这并不意味着 FreeBSD 缺乏某些功能。预定于 2002 年 11 月推出的 FreeBSD 5.0 包括了更加精细的进程控制机制，这允许它更加有效地运行于最多 32 个处理器。版本 5.0 也将提供一个完整的 DEVDFS 设备文件系统。虽然这些在 Linux 上已经存在了一段时间，但你也许还没有听说过。DEVDFS 大体上是一个允许动态变化的设备文件系统。例如，如果你接入了一个 USB 键盘，它将 ‘魔术般地’加入到 /dev 文件夹。在日志文件系统方面，4.4 稳定版提供了‘soft updates’特性。尽管在技术上它也许不能北郊做日志文件系统，但它可以做得比你对日志文件系统的要求更好。&lt;/p&gt;

&lt;p&gt;1998-1999 年. com 爆炸中，Linux 是真正的关键词。所有地方的电脑用户都听说了一种 * 免费 * 的，正在服务器领域和桌面领域挑战 Microsoft 地位的操作系统。即使在今天，Linux 的忠实用户仍然在增加。但是，很多人只是刚刚听说 FreeBSD。希望这篇文章能够帮助你对 FreeBSD 有一个初步的了解，并且把它作为满足你的需求的一种选择。在最后我想说的时，既然它们都是免费的，为什么不都试一试，看看谁更满足你的需要 呢？&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux&lt;/h2&gt;

&lt;p&gt;优点：充分发挥 PC 的功能，花样极多，玩起来很有趣，各方面的表现都不错。
缺点：太过自由，以致於发散掉了，维护方面比 FreeBSD 麻烦 (对一般人来说)。
-&amp;gt; 适合喜欢「玩 PC」，更甚於「玩 UNIX (Network)」的人。&lt;/p&gt;

&lt;h2 id=&quot;freebsd&quot;&gt;FreeBSD&lt;/h2&gt;

&lt;p&gt;优点：非常 UNIX、非常 Free、非常 BSD – UNIX 的理想归宿！！
缺点：太过 UNIX，以致於玩下去很难收手 ^^;;
-&amp;gt; 适合喜欢 UNIX，有心好好经营 service 的人；也是 programmer 的理想 OS。&lt;/p&gt;

&lt;p&gt;FreeBSD Core Team 并不是刻意忽略「入门的方便性」，只是人力有限，把主力投注在「UNIX 风味的主题」上。&lt;/p&gt;

&lt;p&gt;FreeBSD 对硬体的需求实在也不会太严刻，对刚接触的人，建议使用「最一般化」的 硬体，像是: IDE (BigFoot)、ne2000 compatible 杂牌卡，S3Trito64，最烂的 14 寸 VGA，(atapi-cdrom)。&lt;/p&gt;

&lt;p&gt;想说明的是，希望对 FreeBSD 有兴趣的人，别买些「太高档 (或者说奇怪)」的硬体， 到时候装不起来就骂 FreeBSD 怎麽这麽烂 ^^;;&lt;/p&gt;

&lt;p&gt;可以想一下，到底想试试自己的 PC 能跑多少东西，还是真的有心进入 UNIX 的世界&lt;/p&gt;

&lt;h2 id=&quot;为什麽要选择-freebsd-&quot;&gt;为什麽要选择 FreeBSD ?!&lt;/h2&gt;

&lt;p&gt;嗯… 现在有许多免费的 i386 UNIX (在 386 以上 PC 执行的 UNIX)，例如 Linux、NetBSD、FreeBSD、OpenBSD、386BSD 等，究竟你要如何选择属於你的
UNIX ?&lt;/p&gt;

&lt;p&gt;玩了三年多的 UNIX (一年半 Linux，两个月 NetBSD，两年 FreeBSD)
笔者只能以非正式的说法说说笔者的个人意见，希望这些意见不要引起争论
各个作业系统优缺点的大战。&lt;/p&gt;

&lt;p&gt;Linux 是容易上手而且好玩的作业系统，也是现今最多人玩的，正因 为它太好装了，只要硬体没问题闭著眼睛都装的起来，因此 如果你是 i386 UNIX 的新手，这可说是你入门的最佳试金石。&lt;/p&gt;

&lt;p&gt;NetBSD 支援 13 种硬体架构，这也是它的强处，算是 multi-platform
的典范。 也因此，i386 在里面只算是 13 种中的一种，自然无法取得全力的发展，再加上其 core team 比较不活跃，所以在 i386 上的硬体支援并不是很好。&lt;/p&gt;

&lt;p&gt;OpenBSD 源自 NetBSD，刚出来半年左右，专门把 NetBSD 跟 FreeBSD 的 新功能跟修正加在一起，算是 NetBSD+FreeBSD 的混血儿，由於 其 core team 人数少，加上程式码很少是自己开发的，因此现在
前景还不明朗。&lt;/p&gt;

&lt;p&gt;FreeBSD 跟 NetBSD 一样都是基於 4.4 BSD-lite，但是 FreeBSD 现在只支援 i386，所以在 PC 上来说要比 NetBSD/OpenBSD 好太多了， 在从前 NetBSD 跟 FreeBSD 的 core team 是一起的，後来分家了。 FreeBSD 具有一般 BSD 系统的稳定，又从其他作业系统学习了许 多优点，再加上自己开发的各种新功能，时时改进演算法以增加 执行效率，现在已是免费 BSD 系列中效率最好的，最主要是因为 core team 活跃又乐於接受使用者的意见并改进。&lt;/p&gt;

&lt;h3 id=&quot;什麽是-core-team-&quot;&gt;什麽是 core team ?&lt;/h3&gt;

&lt;p&gt;core team 是一个专门对原始程式码做发展跟维护的组织，Linux 没有 core team，NetBSD/OpenBSD/FreeBSD 有。有 core team 的优点是
原始程式码会有一致性，会有组织的被更新，但是整个 OS 的活力也操在 core team 的手中，这就是 NetBSD 在笔者眼中无法兴盛的原因。而没有 core team (如 Linux)，好处是全世界每个人都可以发表自己的修正 (patch) 不须经由 core team 的审核，但缺点是 source code 杂乱无章且可能会 不同步。所以 Linux 在更新东东的时候，必须由使用者自己注意 kernel、 gcc、library、net-tool、modules、甚至各种 kernel patch 版本的一致性。
(或许在 RetHat Linux 已经稍微好一点了)
而这些可怜的情形在 FreeBSD 身上都不会发生。&lt;/p&gt;

&lt;h3 id=&quot;要选择怎样的-os-必须看你自己的需求及能力还有周遭玩的人多不多-多装几种多装几次自己感觉一下才是真的&quot;&gt;要选择怎样的 OS 必须看你自己的需求及能力，还有周遭玩的人多不多， 多装几种，多装几次，自己感觉一下才是真的！&lt;/h3&gt;
&lt;p&gt;(其实只要不怕 format 硬碟，吃饱撑著，装什麽东西、装几次都好说嘛)&lt;/p&gt;

&lt;h4 id=&quot;稳定性&quot;&gt;稳定性&lt;/h4&gt;
&lt;p&gt;一个作业系统最重要的就是稳定性，比方说能连续开机多久，能忍受 多少系统负荷，网路不稳时会不会当掉，网路负荷太大时网路会不会 死掉，笔者个人觉得 FreeBSD &amp;gt; Linux。
尤其许多研究已经提出，Linux 在高系统负荷下的表现相当不好，而
FreeBSD 却不会。要知道世界上最大的 ftp site - http://wcarchive.cdrom.com 是一台跑著&lt;/p&gt;

&lt;p&gt;FreeBSD 的 Pentium pro 机器 (P6-150，512MB RAM，72GB HDs online
more than 1200 ftp users allowed)&lt;/p&gt;

&lt;p&gt;注 : http://wcarchive.cdrom.com = ftp.cdrom.com&lt;/p&gt;

&lt;h4 id=&quot;网路&quot;&gt;网路&lt;/h4&gt;
&lt;p&gt;争夺封包 (packet) 的速度，除了网路卡好坏之外，最重要的还是作业系统跟 驱动程式，使用一样的网路卡 FreeBSD &amp;gt; Linux »&amp;gt; DOS+NCSA. 而且
FreeBSD 在 RPC 及 NFS 上都比 Linux 来的稳定及快速。毕竟 BSD 在网路
这方面是始祖.&lt;/p&gt;

&lt;h4 id=&quot;移植软体的难易程度&quot;&gt;移植软体的难易程度&lt;/h4&gt;
&lt;p&gt;现今一般的软体大多是为 BSD 写的，所以一般软体在 BSD 上会比在 SYSV 上容易编译。而 FreeBSD 是 4.4BSD based，Linux 是 SYSV 加 上 BSD-extension，所以在 Linux 上编译东西有时是个梦靥 (不是很 SYSV 也不是很 Posix 也不是很 BSD)。不过现在越来越多的软体会注 意到 Linux，因为 Linux 使用者太多了。
FreeBSD 有收集数百种软体的 ports，只要打个 make 就可以轻松编译，不然也有编译好的 binary 可以直接安装使用。&lt;/p&gt;

&lt;h4 id=&quot;硬体支援&quot;&gt;硬体支援&lt;/h4&gt;
&lt;p&gt;Linux 支援最多种的硬体，NetBSD 最少，而 FreeBSD 夹在中间正急起
直追中，而且许多 FreeBSD 的 driver 都写的相当棒，反而後来被
移植到 NetBSD 跟 Linux。&lt;/p&gt;

&lt;h4 id=&quot;merged-vmbuffer-cache&quot;&gt;Merged VM/buffer cache&lt;/h4&gt;
&lt;p&gt;Linux 的磁碟 I/O 速度是一流的，因为一来 Linux 的 ext2fs 是 async-mount 的，写入资料时不须一直更新 meta-data，最主要还是 Linux 会把目前没用到的记忆体尽量拿来做 I/O buffer。一般传统 BSD (如 SunOS，NetBSD) 都只有固定大小的 buffer，而 FreeBSD 自己发展出类似 Linux 的 Merged VM/buffer cache，大大提高了 I/O 时的效率以及记忆体利用率，而且现在 FreeBSD 已支援 async-mount， 使得 FreeBSD 的档案系统已经跟 Linux 不相上下，甚至更胜一筹。&lt;/p&gt;

&lt;h4 id=&quot;tty-限制&quot;&gt;tty 限制&lt;/h4&gt;
&lt;p&gt;现在 Linux 要用超过 64 个 tty 除了必须更改应用程式的原始程式码， 还必须做 kernel patch，而 FreeBSD 内定支援 tty [pqrsPQRS][0-9a-v] 总共 256 个 tty，只要到 /dev 下用 MAKEDEV 把 tty 建出来，在 /etc/ttys 加入新的 tty 设定，再到 kernel config file 中把 pty 的数目打入 256 就好了，要使用超过 256 tty 也相当容易修改。&lt;/p&gt;

&lt;h4 id=&quot;完整原始程式码取得&quot;&gt;完整原始程式码取得&lt;/h4&gt;
&lt;p&gt;一般人使用的 Slackware 版 Linux 是由 Slackware 公司整理，所 以一般人要取得完整原始程式码必须自己东抓西抓，这也是 Linux 在 NCTUCCCA 的 mirror 量这麽大的缘故。但往往 Linux 使用者找不到 自己须要的原始程式码，如果没有那些整理 Linux packages 的公司， 以及帮忙 Linux 发展系统工具及函式库的人，Linux 充其量算是只有 Linus 写的 kernel 而已，不过最大的问题还是各家写出来的东东 一致性的问题。不过新出来的 RedHat 已经提供一个简单的软体同步 与更新的方法 - RPM，也算是稍微抒解这一类问题的严重性。 而 FreeBSD 提供完整的系统原始程式码，从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sbin /usr/bin /usr/sbin/usr/lib ...&lt;/code&gt; 甚至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/usr/share/FAQ&lt;/code&gt; 都在里面， 让你可以很容易的更改自己想要的东东，要更新系统时也可以抓取 最新的 source 打个 make world 就成了 (当然也可以用 core team 做好的 binary)，它甚至会自动检查各目录的权限是否正确。 简单一句，就是非常的有组织！利用 binary 来升级只要不到一小时就可以完成，甚至有写好的 script 可以使用。&lt;/p&gt;

&lt;h4 id=&quot;目录档案组织化&quot;&gt;目录档案组织化&lt;/h4&gt;
&lt;p&gt;FreeBSD 根据 4.4BSD 规范，什麽档案应该在那里，应该是什麽权限，编译时应该连结 (link) 成 static 或 dynamic，都非常的严谨，该有的 manpages 绝对不会少。不像 Linux，写 kernel 一个人、写 library 另一个，写 manpages 又另一个、整理 utility 又另一个，各自为政不同步，常常档案到处乱放或是重覆，manpages 不完整，许多目录档案为了新旧版本的相容性而 link 来 link 去。&lt;/p&gt;

&lt;h4 id=&quot;系统安全&quot;&gt;系统安全&lt;/h4&gt;
&lt;p&gt;FreeBSD 使用 shadow password，支援 secure NFS，不像 Linux 要 自己安装 shadow password，将来编译 ftpd，sudo 时又得改来改去。&lt;/p&gt;

&lt;p&gt;因为 USA 版的 DES 禁止输出到美加以外地区，FreeBSD 为了全世界广大的使用者，在密码系统上内定使用 MD5 编码，它比 DES 来的安全，如果你不跟 SunOS 类的 YP server 跑 NIS，那你是不须要安装 DES 的。如果你要使用 DES，你可以安装可以自由流动的 DES 版本 (非 USA 版)，在 / usr/share/FAQ/Text/FreeBSD.FAQ 中有提及那里可以取得，或是到台湾任何一个 FTP 站取得。&lt;/p&gt;

&lt;p&gt;此外，FreeBSD 的使用者登入控制，以及档案安全层级保护都比其他作业系统来的好 (kernel secure level)。FreeBSD 的 core team 会注意 source code 跟 security 的同步性，一有新的问题或 sendmail 漏洞，就会立刻更新程式码，已达到最佳的系统安全。&lt;/p&gt;

&lt;h4 id=&quot;core-team-活跃&quot;&gt;core team 活跃&lt;/h4&gt;
&lt;p&gt;FreeBSD 的 core team 非常活跃而且谦虚，带动整个 FreeBSD 迅速发展，每天都有新的 patch 出来，让使用者以 sup/ctm 来定时自动更新原始程式码。&lt;/p&gt;

&lt;h4 id=&quot;44bsd-lite-based&quot;&gt;4.4BSD-lite based&lt;/h4&gt;
&lt;p&gt;由於 FreeBSD 是基於 4.4BSD-lite 的，因此带来了许多 BSD 的好处，像网路速度稳定、容易移植软体、安全快速等。&lt;/p&gt;

&lt;h4 id=&quot;从-linux-而来的优点&quot;&gt;从 Linux 而来的优点&lt;/h4&gt;
&lt;p&gt;FreeBSD 正在把 Linux 的 dosemu 移植过来，甚至可以直接执行 linux 的 binary (linux emulator)，还有移植 Linux 支援的一些驱动程式。&lt;/p&gt;

&lt;h4 id=&quot;支援-lkm&quot;&gt;支援 LKM&lt;/h4&gt;
&lt;p&gt;FreeBSD 支援 Loadable kernel module，也就是说许多驱动程式在编译 kernel 时可以不必做进去，一旦你要用到时，kernel 会自动从 /lkm/*.o 载入该 driver，这样可以提高弹性并减小 kernel 使用的记忆体空间。未来 FreeBSD 会朝向 LKM device 迈进，就像 Solaris 一样不需编译 kernel。&lt;/p&gt;

&lt;h4 id=&quot;直接执行-gzip-的程式&quot;&gt;直接执行 gzip 的程式&lt;/h4&gt;
&lt;p&gt;FreeBSD 可以直接执行 gzip 的程式，如果你把所有的执行档都 gzip 起来，不就等於用 stacker/doublespace 一样了？！&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;线上监控
kernel 支援 tty snoop，可以监控线上使用者 (不像 linux 那个半调子 ttysnoop，会导致许多问题)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;众多档案系统&quot;&gt;众多档案系统&lt;/h4&gt;
&lt;p&gt;支援 MFS (Memory File System)，类似 SunOS tmpfs 的东东，还有许多 4.4BSD 定义的档案系统，如 LFS、NULLFS、PORTALFS、UMAPFS、UNIONFS。&lt;/p&gt;

&lt;h4 id=&quot;interleaved-swap&quot;&gt;Interleaved swap&lt;/h4&gt;
&lt;p&gt;当你有一个以上的 swap 装置时，会同时使用以增加速度 (尤其是使用 SCSI 装置时)，而不是像 Linux 一个接著一个使用。&lt;/p&gt;

&lt;h4 id=&quot;新的-slice-观念&quot;&gt;新的 slice 观念&lt;/h4&gt;
&lt;p&gt;新的 slice 观念使得 FreeBSD 对其他 OS 的 partition 相容性比传统的 BSD 好很多，在安装上也较为容易。&lt;/p&gt;

&lt;h4 id=&quot;binary-相容性&quot;&gt;Binary 相容性&lt;/h4&gt;
&lt;p&gt;FreeBSD 可以执行 NetBSD-static，BSDI-static，Linux-a.out/elf，SCO-static 等等的 binary code，增加不少相容性。&lt;/p&gt;

&lt;h4 id=&quot;ccd-软体-raid&quot;&gt;ccd (软体 RAID)&lt;/h4&gt;
&lt;p&gt;Concatenated disk (ccd) 驱动程式能让你拥有 Strip、Mirror，甚至 Parity 等 RAID card 才有的功能。&lt;/p&gt;

&lt;h4 id=&quot;多国语言的支援&quot;&gt;多国语言的支援&lt;/h4&gt;
&lt;p&gt;FreeBSD 的 localization 是所有免费作业系统中做的最好的，甚至已经有了亚洲语系 (中文、日文) 的安装介面。&lt;/p&gt;

&lt;h4 id=&quot;有组织的原始程式码&quot;&gt;有组织的原始程式码&lt;/h4&gt;
&lt;p&gt;FreeBSD 的程式开发者在撰写程式码的时候，会去参考各种 RFC 规范以及 新的理论文献，因此 FreeBSD 的程式码有条不紊、层次鲜明；反观 Linux 常常为了急就章而走捷径写出来的东西，到最後开发新功能时又必须改来改去。&lt;/p&gt;

&lt;p&gt;不过随著时间的发展，Linux、*BSD 都会进步，对於免费的作业系统能越来越好自然是乐见其成的。&lt;/p&gt;

&lt;p&gt;一般而言，如果你须要一台稳定快速的 Internet Server，FreeBSD 是你绝对 的选择；如果你是个人使用或只是想学习 UNIX，Linux 跟 FreeBSD 都是很好 的试金石。&lt;/p&gt;

&lt;p&gt;Linux 浮上台面已经四年了，而 FreeBSD 以短短的两年时间就拥有了众多的 使用者人口 (尤其是伺服器，以及程式开发者)，高手的选择必有他的道理。用过 FreeBSD 才知道，『PC 不只是很便宜的工作站』&lt;/p&gt;

&lt;p&gt;但是，Linux 的优点是『好玩』，而且随著 kernel 日渐更新，很多东西也 越来越稳定。我们系上从两年前开始就用 Linux 当 mail, acounts, ftp, gopher, terminal, ppp, slip, BBS servers, 最近又加入 WWW server，服务几百位师生。 目前系上已经有好几台 Linux PC 一起运作，其中包含 NFS，与 WinNT，Win95 的连线与资源共享 (by SAMBA packages)，我们也在测试用其中一台摹拟 Novell Server.&lt;/p&gt;

&lt;p&gt;我们的同时上线人数一般不会超过 100 人，用 Linux 来应付绰绰有馀。如果你想开 的是一次几百人上线的 BBS 大站，那可能 FreeBSD 会比较适合。不过话说 回来，能开这种大站的单位都很有钱，大都拿 SUN 或其他 workstation 级的来 run。&lt;/p&gt;

&lt;p&gt;Linux 另一个优点是全球的 Linux users 远超过 FreeBSD，这使得 Linux 上面 新的软体跟硬体 drivers 更新数目及速度远超过 FreeBSD。例如，DOSEMU 可以 摹拟 DOS，WINE 可以摹拟 Windows 3.1，smbfs 可以将 Win95 或 WinNT 上的 partition 拿来用：这些在 FreeBSD 上面都还在发展中，甚至没有。新电脑 硬体 drivers 的更新也是如此，几乎任何新的硬体都会有 Linux 迷很快地帮大家 写好 drivers。你如果用过 FreeBSD 跟 Linux，你就会发现 FreeBSD 目前对 硬体要求仍然比较『严格』(其实是还没有人写 drivers)。我用的 scanner， 还有 voice modem，都已经有 Linux 迷写好程式，让我可以在 Linux 上 scan 以及有语音信箱。&lt;/p&gt;

&lt;p&gt;我个人的建议是，如果你是个人使用，或者网路同时上线人数不超过一百人以上， Linux 的确是好玩又实用，而且新的硬体很快地几乎都可以在 Linux 上使用。 如果你要架的是几百人上站的机器，又没钱买 workstation，那 FreeBSD 在 网路壅塞时的 performance 的确不错。如果是个人要『玩』，我并不建议 FreeBSD，那会使你觉得提不起兴致 (纯属个人观点)。&lt;/p&gt;

&lt;p&gt;在 csie gopher 中有关 Linux 与 FreeBSD 的比较中，有一项是 FreeBSD 上 software porting 比较 easy。但是这个 comment 随著 Linux users 群日渐庞大， 我觉得已经有些改变：现在在 Linux 很多东西根本用不著 porting，因为很多 软体根本就是 Linux fans 专门为 Linux 设计写出来的，反而要用这些东西 需要额外费心去修改以便能在 FreeBSD 上使用。DOSEMU，smbfs 即是其中几个例子。据最近的 newsgroups，FreeBSD core team 有五十多人，但是 Linux fans 散布在全球各地的 programmers 其数量根本无法计算。有心的话， 比较下 Linux 跟 FreeBSD announce newsgroups 就可知一二。&lt;/p&gt;

&lt;p&gt;所以，我并不是很赞同一个 UNIX 的新手去玩 FreeBSD。但是，假如有人已经玩过 Linux ，或者在其他工作站级机器有过简单管理经验，那他们会发现 FreeBSD 极易入手。玩过 FreeBSD 的人一定知道光要新增 partitions 就已经是一件麻烦的事。堂堂一个 FreeBSD 的 fdisk 介面连 MDOS 的都不如， 可见 FreeBSD core team 之目标不在一般连 ls, cp, tar 都不懂的 newbie。 另外一个动机是假如你必须要架一台超稳定的 Internet server，那 FreeBSD 是目前的 best choice。&lt;/p&gt;

&lt;p&gt;其实呢，如果有心要玩，大可弄个大点的硬碟，同时装上两个系统，一定可以如鱼得水。我的 office 中同时有一台 FreeBSD，一台 Linux，各做各的事， 也是很快乐。。。。&lt;/p&gt;

&lt;p&gt;就目前使用者能观察到的来看，一般相信 linux 的 data-path-consumed process 的执行速度，是众多 x86 作业系统中最快的；而 high load 下的网路则 令人不能感到非常满意。虽然 linux 第二版後网路 部分有了很大的改善，据 Linus 本人的说法，linux 在传 single package 已比 FreeBSD 还优胜，但作为 NFS 或 high load netserver 还是显得略有不顺 (所谓 “不顺” 与 “不稳” 无关). 毕竟，考查 linux 的发展历史，的确是先在 x86-embeded scheduler, fs, 等核心 process 执行部分，最後才加进网路部分，process 执行最佳而网路稍逊乃是合理 的结果.&lt;/p&gt;

&lt;p&gt;一般建议如果机器用来执行程式 (如跑 project) 为主，跑各式怪模怪样的小程式及 server, 或有非正统硬体者 使用 linux 可能较佳.&lt;/p&gt;</content><author><name>Lewin</name></author><category term="linux" /><category term="FreeBSD" /><summary type="html">传说中 FreeBSD 比 linux 稳定，大型网站几乎都建立在 FreeBSD 系统上，我一直疑惑难道 linux 是否真的不能做大型网站。于是用 netcraft 网站做了个测试： http://toolbar.netcraft.com/site_report?url=www.phpchina.com 按照上面的链接你就可以查询任何一个网站的服务器架构，当然，可信度和准确度我不能保证。下面是我测试的案例：</summary></entry><entry><title type="html">linux tee 命令</title><link href="https://lewinz.org/2021/08/10/linux-tee/" rel="alternate" type="text/html" title="linux tee 命令" /><published>2021-08-10T00:00:00+08:00</published><updated>2021-08-10T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/10/linux-tee</id><content type="html" xml:base="https://lewinz.org/2021/08/10/linux-tee/">&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make 2&amp;gt;&amp;amp;1 | &lt;span class=&quot;nb&quot;&gt;tee &lt;/span&gt;log.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;21&quot;&gt;2&amp;gt;&amp;amp;1&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 stdin，1 stdout，2 stderr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2&amp;gt;&amp;amp;1 应该分成两个部分来看，一个是 2 &amp;gt; 以及另一个是 &amp;amp; 1，&lt;/p&gt;

&lt;p&gt;其中 2 &amp;gt; 就是将标准出错重定向到某个特定的地方；&amp;amp;1 是指无论标准输出在哪里。&lt;/p&gt;

&lt;p&gt;所以 2&amp;gt;&amp;amp;1 的意思就是说无论标准出错在哪里，都将标准出错重定向到标准输出中。&lt;/p&gt;

&lt;p&gt;有时候希望将错误的信息重新定向到输出，就是将 2 的结果重定向至 1 中就有了”2&amp;gt;1” 这样的思路，如果按照上面的写法，系统会默认将错误的信息（STDERR）2 重定向到一个名字为 1 的文件中，而非所想的（STDOUT）中。因此需要加 &amp;amp; 进行区分。就有了 2&amp;gt;&amp;amp;1 这样的用法&lt;/p&gt;

&lt;h2 id=&quot;-管道&quot;&gt;| 管道&lt;/h2&gt;
&lt;p&gt;管道的作用是提供一个通道，将上一个程序的标准输出重定向到下一个程序作为下一个程序的标准输入。&lt;/p&gt;

&lt;p&gt;通常使用管道的好处是一方面形式上简单，另一方面其执行效率要远高于使用临时文件。&lt;/p&gt;

&lt;p&gt;这里使用管道的目的是将 make 程序的输出重定向到下一个程序，其最终目的是用来将输出 log 存入文件中。&lt;/p&gt;

&lt;h2 id=&quot;tee&quot;&gt;tee&lt;/h2&gt;
&lt;p&gt;tee 从标准输入中读取，并将读入的内容写到标准输出以及文件中。&lt;/p&gt;

&lt;p&gt;所以这里 tee 命令的作用是将数据读入并写到标准输出以及 log.txt 中。&lt;/p&gt;

&lt;p&gt;之所以要将编译产生的 log 保存到 log.txt 中，其原因是你的标准输出的缓存可能是有限制的，而你编译程序产生的 log 可能会很多，这样很可能会造成 log 不完整；&lt;/p&gt;

&lt;p&gt;其目的是当程序发生编译错误的时候，我们可以从 log.txt 中看到完整的编译 log，这样方便查找编译错误。&lt;/p&gt;</content><author><name>Lewin</name></author><category term="linux" /><category term="tee" /><summary type="html">make 2&amp;gt;&amp;amp;1 | tee log.txt</summary></entry><entry><title type="html">golang channel</title><link href="https://lewinz.org/2021/08/06/golang-channel/" rel="alternate" type="text/html" title="golang channel" /><published>2021-08-06T00:00:00+08:00</published><updated>2021-08-06T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/06/golang-channel</id><content type="html" xml:base="https://lewinz.org/2021/08/06/golang-channel/">&lt;h2 id=&quot;基本定义&quot;&gt;基本定义&lt;/h2&gt;
&lt;p&gt;channel 是 Go 语言中的一个核心类型，可以把它看成管道。并发核心单元通过它就可以发送或者接收数据进行通讯，这在一定程度上又进一步降低了编程的难度。channel 是一个数据类型，主要用来解决 go 程的同步问题以及协程之间数据共享（数据传递）的问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;channle 本质上是一个数据结构 ——（队列），数据是先进先出。&lt;/li&gt;
  &lt;li&gt;具有线程安全机制，多个 go 程访问时，不需要枷锁，也就是说 channel 本身是线程安全的。（写入/写出 数据操作都有互斥锁机制保护，线程安全。）&lt;/li&gt;
  &lt;li&gt;channel 是有类型的，如一个 string 类型的 channel 只能存放 string 类型数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;channel-遍历读取&quot;&gt;channel 遍历读取&lt;/h2&gt;
&lt;h3 id=&quot;简单的读&quot;&gt;简单的读&lt;/h3&gt;
&lt;p&gt;data:=&amp;lt;-ch   （如果读多次，需要用循环）&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;写入的次数与读取的次数需要一致（本例是 10）；&lt;/li&gt;
  &lt;li&gt;如果读的次数多于写的次数会发生：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fatal error: all goroutines are asleep - deadlock!&lt;/code&gt; ，若在 mm1 中对 ch8 进行关闭（执行  close (ch8) ），多于的次数读到的数据为 0（数据默认值）。&lt;/li&gt;
  &lt;li&gt;读的次数少于写的次数，会读取出次数对应的内容，不会报错。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;断言方式&quot;&gt;断言方式&lt;/h3&gt;
&lt;p&gt;if  value, ok := &amp;lt;-ch; ok {&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;如果写端没有写数据，也没有关闭。&amp;lt;-ch; 会阻塞  —【重点】&lt;/li&gt;
  &lt;li&gt;如果写端写数据， value 保存 &amp;lt;-ch 读到的数据。 ok 被设置为 true&lt;/li&gt;
  &lt;li&gt;如果写端关闭。 value 为数据类型默认值。ok 被设置为 false&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;range-方式&quot;&gt;range 方式&lt;/h3&gt;
&lt;p&gt;for num := range ch {  &lt;br /&gt;
}&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注：写完之后一定要关闭（ 执行：close (ch8)  ），否则会出现以下运行结果：&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;特别说明：以上实例都是子 go 程写，主 go 程读。如在子 go 程中写，另一个子 go 程中读，不管哪种方法，都不会出现以上错误问题。（多次实例验证）&lt;/p&gt;

&lt;p&gt;总结：通过以上验证，为了保证程序的健壮性，在设计程序时，最好将 channel 的读、写分别在子 go 程中进行。写完数据之后，记得关闭 channel。&lt;/p&gt;

&lt;p&gt;补充一点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;channel 不像文件一样需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束 range 循环之类的，才去关闭 channel；&lt;/li&gt;
  &lt;li&gt;关闭 channel 后，无法向 channel 再发送数据 (引发 panic 错误后导致接收立即返回零值)；&lt;/li&gt;
  &lt;li&gt;关闭 channel 后，可以继续从 channel 接收数据；&lt;/li&gt;
  &lt;li&gt;对于 nil channel，无论收发都会被阻塞。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="channel" /><summary type="html">基本定义 channel 是 Go 语言中的一个核心类型，可以把它看成管道。并发核心单元通过它就可以发送或者接收数据进行通讯，这在一定程度上又进一步降低了编程的难度。channel 是一个数据类型，主要用来解决 go 程的同步问题以及协程之间数据共享（数据传递）的问题。</summary></entry><entry><title type="html">linux nc 监听 TCP/UDP</title><link href="https://lewinz.org/2021/08/05/linux-nc-listener/" rel="alternate" type="text/html" title="linux nc 监听 TCP/UDP" /><published>2021-08-05T00:00:00+08:00</published><updated>2021-08-05T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/05/linux-nc-listener</id><content type="html" xml:base="https://lewinz.org/2021/08/05/linux-nc-listener/">&lt;p&gt;Linux 提供了一个很好的工具用来监控 TCP 或者 UDP 端口&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install nc -y&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;监听-tcp-端口与测试&quot;&gt;监听 TCP 端口与测试&lt;/h2&gt;
&lt;h3 id=&quot;监听在tcp的3307端口&quot;&gt;监听在tcp的3307端口&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lv 3307&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;往tcp的3307端口发送消息&quot;&gt;往tcp的3307端口发送消息&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc localhost 3307&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;监听-udp-端口与测试&quot;&gt;监听 UDP 端口与测试&lt;/h2&gt;
&lt;h3 id=&quot;监听在udp的3307端口&quot;&gt;监听在UDP的3307端口&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lvu 3307&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;往udp端口发送消息&quot;&gt;往UDP端口发送消息&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo -n &quot;hello world,UDP&quot; &amp;gt;/dev/udp/localhost/3307&lt;/code&gt;&lt;/p&gt;</content><author><name>Lewin</name></author><category term="linux" /><category term="nc" /><category term="listener" /><summary type="html">Linux 提供了一个很好的工具用来监控 TCP 或者 UDP 端口</summary></entry><entry><title type="html">golang 证书转换</title><link href="https://lewinz.org/2021/08/04/golang-cert-convert/" rel="alternate" type="text/html" title="golang 证书转换" /><published>2021-08-04T00:00:00+08:00</published><updated>2021-08-04T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/04/golang-cert-convert</id><content type="html" xml:base="https://lewinz.org/2021/08/04/golang-cert-convert/">&lt;h2 id=&quot;pem-转-pkcs12&quot;&gt;PEM 转 PKCS12&lt;/h2&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// 需要使用第三方包&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gopkcs12&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;software.sslmate.com/src/go-pkcs12&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// PemCertToP12 将 pem 证书转换为 PKCS12 格式&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 传入参数为 pem 证书的内容与私钥内容&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PemCertToP12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyBuf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p12Cert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;caBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;certInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pem 公钥证书格式错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;crt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pem 公钥证书解析错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;keyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pem 私钥证书格式错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;priKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParsePKCS1PrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pem 私钥证书解析错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;pfx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkcs12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;证书转换错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pfx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pkcs12-转-pem&quot;&gt;PKCS12 转 PEM&lt;/h2&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// 需要使用第三方包&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gopkcs12&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;software.sslmate.com/src/go-pkcs12&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// ConvertP12Detail 解析 P12 证书内容，获取过期时间与域名&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 传入参数为 P12 证书内容与密码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConvertP12Detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commonName&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expirationTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkcs12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;解析 P12 证书内容错误(%v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommonName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;扩展&quot;&gt;扩展&lt;/h2&gt;
&lt;p&gt;openstack 组件 Barbican 处理证书需要将证书内容 Base64 处理之后上传，且证书格式必须为 PKCS12&lt;/p&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="certificate" /><category term="convert" /><summary type="html">PEM 转 PKCS12 ``` golang import ( // 需要使用第三方包 gopkcs12 “software.sslmate.com/src/go-pkcs12” )</summary></entry><entry><title type="html">DNSPod 是什么</title><link href="https://lewinz.org/2021/08/03/dnspod/" rel="alternate" type="text/html" title="DNSPod 是什么" /><published>2021-08-03T00:00:00+08:00</published><updated>2021-08-03T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/03/dnspod</id><content type="html" xml:base="https://lewinz.org/2021/08/03/dnspod/">&lt;p&gt;2005 年 10 月为了解决南北互通情况下，广告投放系统的广告显示速度问题，由吴洪声个人开发了一套根据用户来路 IP，分别把用户引导到电信或者网通服务器的 DNS 程序，并应用到线上的业务系统中。此程序为 DNSPod 前身。&lt;/p&gt;

&lt;p&gt;DNSPod 建立于 2006 年 3 月份，是一款免费智能 DNS 产品。 DNSPod 可以为同时有电信、联通、教育网服务器的网站提供智能的解析，让电信用户访问电信的服务器，联通的用户访问联通的服务器，教育网的用户访问教育网的服务器，达到互联互通的效果。公司官网：&lt;a href=&quot;https://www.dnspod.cn/&quot;&gt;https://www.dnspod.cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DNSPod 是 DNS 解析服务提供商、域名托管商。它除了实时生效、不限制用户添加的域名和记录数量、提供 URL 转发、搜索引擎优化、域名共享管理、域名锁定、IPv6 的支持、动态域名解析、API 接口、批量修改管理等先进功能外，还拥有：云 DNS、DNSPod DNS Protector（DNSPod 自主研发的 DNS 防护软件）、宕机监控、安全中心、7*24 小时专业技术支持。并且所有功能都是免费向所有用户提供。&lt;/p&gt;

&lt;p&gt;DNSPod 以稳定性、安全性、功能强大、智能免费、高速等优 势深得广大站长和企业用户们的喜爱，以至于越来越多的企业站、地方门户站、游戏站等等都在使用 DNSPod，他们喜欢的是 DNSPod 给他们带来的稳定性、承受能力强、访问速度快以及极高的用户体验，使用普通的 DNS（像域名注册商提供的）不是不可以 “用”，但是避免不了因为不稳定导致网站时常经常打不开，由于功 能限制不能实现想要实现的功能、因为用户体验不够好等丢失客户。所以选择一个好的 DNS 服务商可以为自己的网站带来很大的、意想不到的收益，避开不必要的损失。功能上：除了智能 DNS 解析，普通 DNS 解析也可以满足用户的稳定、高速等需求。相对竞争对手的产品，DNSPod 除了实时生效，不限制用户添加的域名和记录数量外，还率先提供 了 IPv6 的支持和动态域名解析的功能，另外还支持 DNS 轮询、URL 转发、API 接口、批量修改管理等先进功能。并且所有功能都是免费提供。&lt;/p&gt;

&lt;p&gt;据北京神州绿盟信息安全科技股份有限公司提交的创业板首发招股说明书披露，腾讯关联公司世纪凯旋已于 2011 年 6 月收购了 DNSPod，转让价格为 4000 万元。2013 年 8 月 14 日 DNSPod 解析域名总量达 1,398,958，成为中国第一大域名解析服务商。&lt;/p&gt;</content><author><name>Lewin</name></author><category term="dns" /><category term="dnspod" /><summary type="html">2005 年 10 月为了解决南北互通情况下，广告投放系统的广告显示速度问题，由吴洪声个人开发了一套根据用户来路 IP，分别把用户引导到电信或者网通服务器的 DNS 程序，并应用到线上的业务系统中。此程序为 DNSPod 前身。</summary></entry><entry><title type="html">Linux ssh 相关问题</title><link href="https://lewinz.org/2021/08/03/linux-ssh-setting/" rel="alternate" type="text/html" title="Linux ssh 相关问题" /><published>2021-08-03T00:00:00+08:00</published><updated>2021-08-03T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/03/linux-ssh-setting</id><content type="html" xml:base="https://lewinz.org/2021/08/03/linux-ssh-setting/">&lt;h2 id=&quot;ssh-client-设置轮询导致-ssh-禁用&quot;&gt;ssh client 设置轮询导致 ssh 禁用&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vi /etc/hosts.allow&lt;/span&gt;
sshd:all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssh-请求连接时间长&quot;&gt;ssh 请求连接时间长&lt;/h2&gt;
&lt;h3 id=&quot;使用了-dns-反查导致耗时&quot;&gt;使用了 DNS 反查导致耗时&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vi /etc/ssh/sshd_config&lt;/span&gt;

UseDNS no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认情况下会有一行被注释的配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# UseDNS yes&lt;/code&gt;, 但是 ssh 缺省情况下默认是 yes ，所以需要显式配置为 no&lt;/p&gt;

&lt;p&gt;这个配置会导致 ssh 在 dns 解析的时候，如果 dns 中没有域名解析记录，会等待 dns 服务器超时返回。&lt;/p&gt;

&lt;h3 id=&quot;kerberos-方式验证导致耗时&quot;&gt;Kerberos 方式验证导致耗时&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vi /etc/ssh/sshd_config&lt;/span&gt;

GSSAPIAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般 ssh 依次进行的认证方式是 publickey, gssapi-keyex, gssapi-with-mic, password，一般我们常用的是 publickey、password，但是 gssapi（基于 Kerberos） 每次验证还是会尝试，非常耗时，修改 GSSAPIAuthentication 配置可关闭 gssapi 验证过程。&lt;/p&gt;

&lt;h2 id=&quot;重启&quot;&gt;重启&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service sshd restart&lt;/code&gt;&lt;/p&gt;</content><author><name>Lewin</name></author><category term="linux" /><category term="ssh" /><summary type="html">ssh client 设置轮询导致 ssh 禁用 # vi /etc/hosts.allow sshd:all</summary></entry><entry><title type="html">Golang 基于 viper 的配置热加载或动态变更方法介绍</title><link href="https://lewinz.org/2021/08/01/golang-viper/" rel="alternate" type="text/html" title="Golang 基于 viper 的配置热加载或动态变更方法介绍" /><published>2021-08-01T00:00:00+08:00</published><updated>2021-08-01T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/01/golang-viper</id><content type="html" xml:base="https://lewinz.org/2021/08/01/golang-viper/">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;在写 web server 时，往往需要引入各种各样的配置信息，如依赖的其他中间件（redis、elasticsearch）等，一旦这些服务发生变更，我们需要重新启动 web server，以使配置生效。在 Golang 中，基于 viper 的动态配置就可以省去这些繁琐的步骤了。接下来用一个示例来说明如何使用 viper 的配置热加载：&lt;/p&gt;

&lt;h2 id=&quot;项目结构&quot;&gt;项目结构&lt;/h2&gt;
&lt;p&gt;整个项目的目录结构:&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicConfigDemo&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 项目地址&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 配置文件目录&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 采用 yaml 格式文件，viper 同样支持 toml、json 等格式的配置文件&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 代码文件夹&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 动态配置文件夹&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 配置加载脚本&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// go package 管理依赖的包文件&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// go package 管理打包产生的文件&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// web server 的入口，主函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;代码细节&quot;&gt;代码细节&lt;/h2&gt;
&lt;p&gt;各文件的主体内容：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# conf/base.yaml
service:
  redis:
    host: 127.0.0.1
    port: 6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;conf/base.yaml 文件定义了配置项，包含 redis 的 host 及 port 信息。&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/fsnotify/fsnotify&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/spf13/viper&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Viper&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loading configuration logics...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Viper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetConfigName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddConfigPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;conf/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetConfigType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yaml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadInConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to get the configuration.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WatchConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnConfigChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsnotify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Detect config change: %s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;src/dynamic_config/dynamic_config.go 定义了全局配置信息的加载及动态监控方法，init 函数为初始化执行的脚本，initConfig 为初始化当前配置，dynamicConfig 为冬天监听，通过 viper 的内部方法 WatchConfig 实现。&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;DynamicConfigDemo/src/dynamic_config&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Current redis host is: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamic_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlobalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;service.redis.host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;m&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You are welcome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:9292&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main.go 为主函数，调用 gin 包定义 web server 服务，实现了一个简单的 http server 服务器，每次请求发送时会打印配置的 redis host 信息。&lt;/p&gt;

&lt;h2 id=&quot;调用示例&quot;&gt;调用示例&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;第一次调用，打印出当前 redis host 为 127.0.0.1&lt;/li&gt;
  &lt;li&gt;随后我们将 redis host 修改为 127.0.0.2&lt;/li&gt;
  &lt;li&gt;src/dynamic_config/dynamic_config.go 文件中的如下代码 GlobalConfig.OnConfigChange(func(event fsnotify.Event) { fmt.Printf(“Detect config change: %s \n”, event.String()) }) 监控到配置文件变更时会输出变更通知，如图中红框所示；&lt;/li&gt;
  &lt;li&gt;第二次调用时，则打印出最新配置的 redis host 信息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/golang_viper_file_reload.png&quot; alt=&quot;golang_viper_file_reload&quot; /&gt;&lt;/p&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="viper" /><category term="file" /><category term="reload" /><summary type="html">概述 在写 web server 时，往往需要引入各种各样的配置信息，如依赖的其他中间件（redis、elasticsearch）等，一旦这些服务发生变更，我们需要重新启动 web server，以使配置生效。在 Golang 中，基于 viper 的动态配置就可以省去这些繁琐的步骤了。接下来用一个示例来说明如何使用 viper 的配置热加载：</summary></entry><entry><title type="html">gRPC</title><link href="https://lewinz.org/2021/08/01/google-grpc/" rel="alternate" type="text/html" title="gRPC" /><published>2021-08-01T00:00:00+08:00</published><updated>2021-08-01T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/01/google-grpc</id><content type="html" xml:base="https://lewinz.org/2021/08/01/google-grpc/">&lt;p&gt;gRPC 是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于 HTTP/2 协议标准而设计，基于 ProtoBuf (Protocol Buffers) 序列化协议开发，且支持众多开发语言。&lt;/p&gt;

&lt;p&gt;gRPC 是基于 HTTP/2 协议的，要深刻理解 gRPC，理解下 HTTP/2 是必要的，这里先简单介绍一下 HTTP/2 相关的知识，然后再介绍下 gRPC 是如何基于 HTTP/2 构建的。&lt;/p&gt;

&lt;h2 id=&quot;http1x&quot;&gt;HTTP/1.x&lt;/h2&gt;
&lt;p&gt;HTTP 协议可以算是现阶段 Web 上面最通用的协议了，在之前很长一段时间，很多应用都是基于 HTTP/1.x 协议，HTTP/1.x 协议是一个文本协议，可读性非常好，但其实并不高效，笔者主要碰到过几个问题：&lt;/p&gt;
&lt;h3 id=&quot;parser&quot;&gt;Parser&lt;/h3&gt;
&lt;p&gt;如果要解析一个完整的 HTTP 请求，首先我们需要能正确的读出 HTTP header。HTTP header 各个 fields 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt; 分隔，然后跟 body 之间使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n\r\n&lt;/code&gt; 分隔。&lt;/p&gt;

&lt;p&gt;解析完 header 之后，我们才能从 header 里面的 content-length 拿到 body 的 size，从而读取 body。&lt;/p&gt;

&lt;p&gt;这套流程其实并不高效，因为我们需要读取多次，才能将一个完整的 HTTP 请求给解析出来，虽然在代码实现上面，有很多优化方式，譬如：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一次将一大块数据读取到 buffer 里面避免多次 IO read
读取的时候直接匹配 \r\n 的方式流式解析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但上面的方式对于高性能服务来说，终归还是会有开销。其实最主要的问题在于，HTTP/1.x 的协议是文本协议，&lt;strong&gt;是给人看的&lt;/strong&gt;，对机器不友好，如果要对机器友好，二进制协议才是更好的选择。&lt;/p&gt;

&lt;p&gt;如果大家对解析 HTTP/1.x 很感兴趣，可以研究下 http-parser，一个非常高效小巧的 C library，见过不少框架都是集成了这个库来处理 HTTP/1.x 的。&lt;/p&gt;

&lt;h3 id=&quot;requestresponse&quot;&gt;Request/Response&lt;/h3&gt;
&lt;p&gt;HTTP/1.x 另一个问题就在于它的交互模式，&lt;strong&gt;一个连接每次只能一问一答&lt;/strong&gt;，也就是 client 发送了 request 之后，必须等到 response，才能继续发送下一次请求。&lt;/p&gt;

&lt;p&gt;这套机制是非常简单，但会造成网络连接利用率不高。如果需要同时进行大量的交互，client 需要跟 server 建立多条连接，但连接的建立也是有开销的，所以为了性能，通常这些连接都是长连接一直保活的，虽然对于 server 来说同时处理百万连接也没啥太大的挑战，但终归效率不高。&lt;/p&gt;

&lt;h3 id=&quot;push&quot;&gt;Push&lt;/h3&gt;
&lt;p&gt;用 HTTP/1.x 做过推送的同学，大概就知道有多么的痛苦，因为 HTTP/1.x 并没有推送机制。所以通常两种做法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Long polling 方式,也就是直接给 server 挂一个连接，等待一段时间（譬如 1 分钟），如果 server 有返回或者超时，则再次重新 poll。&lt;/li&gt;
  &lt;li&gt;Web-socket，通过 upgrade 机制显式的将这条 HTTP 连接变成裸的 TCP，进行双向交互。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相比 Long polling，笔者还是更喜欢 web-socket 一点，毕竟更加高效，只是 web-socket 后面的交互并不是传统意义上面的 HTTP 了。&lt;/p&gt;

&lt;h2 id=&quot;http2&quot;&gt;HTTP/2&lt;/h2&gt;
&lt;p&gt;虽然 HTTP/1.x 协议可能仍然是当今互联网运用最广泛的协议，但随着 Web 服务规模的不断扩大，HTTP/1.x 越发显得捉紧见拙，我们急需另一套更好的协议来构建我们的服务，于是就有了 HTTP/2。&lt;/p&gt;

&lt;p&gt;HTTP/2 是一个二进制协议，这也就意味着它的可读性几乎为 0，但幸运的是，我们还是有很多工具，譬如 Wireshark， 能够将其解析出来。&lt;/p&gt;

&lt;p&gt;在了解 HTTP/2 之前，需要知道一些通用术语：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stream： 一个双向流，一条连接可以有多个 streams。&lt;/li&gt;
  &lt;li&gt;Message： 也就是逻辑上面的 request，response。&lt;/li&gt;
  &lt;li&gt;Frame:：数据传输的最小单位。每个 Frame 都属于一个特定的 stream 或者整个连接。一个 message 可能有多个 frame 组成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;frame-format&quot;&gt;Frame Format&lt;/h3&gt;
&lt;p&gt;Frame 是 HTTP/2 里面最小的数据传输单位，一个 Frame 定义如下（直接从官网 copy 的）：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Flag 和 R：保留位，可以先不管。
Stream Identifier：标识所属的 stream，如果为 0，则表示这个 frame 属于整条连接。
Frame Payload：根据不同 Type 有不同的格式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以看到，Frame 的格式定义还是非常的简单，按照官方协议，可以非常方便的写一个出来。&lt;/p&gt;

&lt;h3 id=&quot;multiplexing&quot;&gt;Multiplexing&lt;/h3&gt;
&lt;p&gt;HTTP/2 通过 stream 支持了连接的多路复用，提高了连接的利用率。Stream 有很多重要特性：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;一条连接可以包含多个 streams，多个 streams 发送的数据互相不影响。&lt;/li&gt;
  &lt;li&gt;Stream 可以被 client 和 server 单方面或者共享使用。&lt;/li&gt;
  &lt;li&gt;Stream 可以被任意一段关闭。&lt;/li&gt;
  &lt;li&gt;Stream 会确定好发送 frame 的顺序，另一端会按照接受到的顺序来处理。&lt;/li&gt;
  &lt;li&gt;Stream 用一个唯一 ID 来标识。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里再说一下 Stream ID，如果是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 创建的 stream，ID 就是&lt;strong&gt;奇数&lt;/strong&gt;，如果是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; 创建的，ID 就是&lt;strong&gt;偶数&lt;/strong&gt;。ID 0x00 和 0x01 都有特定的使用场景。&lt;/p&gt;

&lt;p&gt;Stream ID 不可能被重复使用，如果一条连接上面 ID 分配完了，client 会新建一条连接。而 server 则会给 client 发送一个 GOAWAY frame 强制让 client 新建一条连接。&lt;/p&gt;

&lt;p&gt;为了更大的提高一条连接上面的 stream 并发，可以考虑调大 SETTINGS_MAX_CONCURRENT_STREAMS，在 TiKV 里面，我们就遇到过这个值比较小，整体吞吐上不去的问题。&lt;/p&gt;

&lt;p&gt;这里还需要注意，虽然一条连接上面能够处理更多的请求了，但一条连接远远是不够的。一条连接通常只有一个线程来处理，所以并不能充分利用服务器多核的优势。同时，每个请求编解码还是有开销的，所以用一条连接还是会出现瓶颈。&lt;/p&gt;

&lt;p&gt;在 TiKV 有一个版本中，我们就过分相信一条连接跑多 streams 这种方式没有问题，就让 client 只用一条连接跟 TiKV 交互，结果发现性能完全没法用，不光处理连接的线程 CPU 跑满，整体的性能也上不去，后来我们换成了多条连接，情况才好转。&lt;/p&gt;

&lt;h3 id=&quot;priority&quot;&gt;Priority&lt;/h3&gt;
&lt;p&gt;因为一条连接允许多个 streams 在上面发送 frame，那么在一些场景下面，我们还是希望 stream 有优先级，方便对端为不同的请求分配不同的资源。譬如对于一个 Web 站点来说，优先加载重要的资源，而对于一些不那么重要的图片啥的，则使用低的优先级。&lt;/p&gt;

&lt;p&gt;我们还可以设置 Stream Dependencies，形成一棵 streams priority tree。假设 Stream A 是 parent，Stream B 和 C 都是它的孩子，B 的 weight 是 4，C 的 weight 是 12，假设现在 A 能分配到所有的资源，那么后面 B 能分配到的资源只有 C 的 1/3。&lt;/p&gt;

&lt;h3 id=&quot;flow-control&quot;&gt;Flow Control&lt;/h3&gt;
&lt;p&gt;HTTP/2 也支持流控，如果 sender 端发送数据太快，receiver 端可能因为太忙，或者压力太大，或者只想给特定的 stream 分配资源，receiver 端就可能不想处理这些数据。譬如，如果 client 给 server 请求了一个视频，但这时候用户暂停观看了，client 就可能告诉 server 别再发送数据了。&lt;/p&gt;

&lt;p&gt;虽然 TCP 也有 flow control，但它仅仅只对一个连接有效果。HTTP/2 在一条连接上面会有多个 streams，有时候，我们仅仅只想对一些 stream 进行控制，所以 HTTP/2 单独提供了流控机制。Flow control 有如下特性：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Flow control 是单向的。Receiver 可以选择给 stream 或者整个连接设置 window size。&lt;/li&gt;
  &lt;li&gt;Flow control 是基于信任的。Receiver 只是会给 sender 建议它的初始连接和 stream 的 flow control window size。&lt;/li&gt;
  &lt;li&gt;Flow control 不可能被禁止掉。当 HTTP/2 连接建立起来之后，client 和 server 会交换 SETTINGS frames，用来设置 flow control window size。&lt;/li&gt;
  &lt;li&gt;Flow control 是 hop-by-hop，并不是 end-to-end 的，也就是我们可以用一个中间人来进行 flow control。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里需要注意，HTTP/2 默认的 window size 是 64 KB，实际这个值太小了，在 TiKV 里面我们直接设置成 1 GB。&lt;/p&gt;

&lt;h3 id=&quot;hpack&quot;&gt;HPACK&lt;/h3&gt;
&lt;p&gt;在一个 HTTP 请求里面，我们通常在 header 上面携带很多该请求的元信息，用来描述要传输的资源以及它的相关属性。在 HTTP/1.x 时代，我们采用纯文本协议，并且使用 \r\n 来分隔，如果我们要传输的元数据很多，就会导致 header 非常的庞大。&lt;/p&gt;

&lt;p&gt;另外，多数时候，在一条连接上面的多数请求，其实 header 差不了多少，譬如我们第一个请求可能 GET /a.txt，后面紧接着是 GET /b.txt，两个请求唯一的区别就是 URL path 不一样，但我们仍然要将其他所有的 fields 完全发一遍。&lt;/p&gt;

&lt;p&gt;HTTP/2 为了结果这个问题，使用了 HPACK。虽然 HPACK 的 RFC 文档 看起来比较恐怖，但其实原理非常的简单易懂。&lt;/p&gt;

&lt;p&gt;HPACK 提供了一个静态和动态的 table，静态 table 定义了通用的 HTTP header fields，譬如 method，path 等。发送请求的时候，只要指定 field 在静态 table 里面的索引，双方就知道要发送的 field 是什么了。&lt;/p&gt;

&lt;p&gt;对于动态 table，初始化为空，如果两边交互之后，发现有新的 field，就添加到动态 table 上面，这样后面的请求就可以跟静态 table 一样，只需要带上相关的 index 就可以了。&lt;/p&gt;

&lt;p&gt;同时，为了减少数据传输的大小，使用 Huffman 进行编码。这里就不再详细说明 HPACK 和 Huffman 如何编码了。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;上面只是大概列举了一些 HTTP/2 的特性，还有一些，譬如 push，以及不同的 frame 定义等都没有提及，大家感兴趣，可以自行参考 HTTP/2 RFC 文档。&lt;/p&gt;

&lt;h2 id=&quot;grpc&quot;&gt;gRPC&lt;/h2&gt;
&lt;p&gt;gRPC 是 Google 基于 HTTP/2 以及 protobuf 的，要了解 gRPC 协议，只需要知道 gRPC 是如何在 HTTP/2 上面传输就可以了。&lt;/p&gt;

&lt;p&gt;gRPC 通常有四种模式，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unary&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client streaming&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server streaming&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bidirectional streaming&lt;/code&gt;，对于底层 HTTP/2 来说，它们都是 stream，并且仍然是一套 request + response 模型。&lt;/p&gt;

&lt;h3 id=&quot;request&quot;&gt;Request&lt;/h3&gt;
&lt;p&gt;gRPC 的 request 通常包含 Request-Headers, 0 或者多个 Length-Prefixed-Message 以及 EOS。&lt;/p&gt;

&lt;p&gt;Request-Headers 直接使用的 HTTP/2 headers，在 HEADERS 和 CONTINUATION frame 里面派发。定义的 header 主要有 Call-Definition 以及 Custom-Metadata。Call-Definition 里面包括 Method（其实就是用的 HTTP/2 的 POST），Content-Type 等。而 Custom-Metadata 则是应用层自定义的任意 key-value，key 不建议使用 grpc- 开头，因为这是为 gRPC 后续自己保留的。&lt;/p&gt;

&lt;p&gt;Length-Prefixed-Message 主要在 DATA frame 里面派发，它有一个 Compressed flag 用来表示该 message 是否压缩，如果为 1，表示该 message 采用了压缩，而压缩算啊定义在 header 里面的 Message-Encoding 里面。然后后面跟着四字节的 message length 以及实际的 message。&lt;/p&gt;

&lt;p&gt;EOS（end-of-stream） 会在最后的 DATA frame 里面带上了 END_STREAM 这个 flag。用来表示 stream 不会再发送任何数据，可以关闭了。&lt;/p&gt;

&lt;h3 id=&quot;response&quot;&gt;Response&lt;/h3&gt;
&lt;p&gt;Response 主要包含 Response-Headers，0 或者多个 Length-Prefixed-Message 以及 Trailers。如果遇到了错误，也可以直接返回 Trailers-Only。&lt;/p&gt;

&lt;p&gt;Response-Headers 主要包括 HTTP-Status，Content-Type 以及 Custom-Metadata 等。Trailers-Only 也有 HTTP-Status ，Content-Type 和 Trailers。Trailers 包括了 Status 以及 0 或者多个 Custom-Metadata。&lt;/p&gt;

&lt;p&gt;HTTP-Status 就是我们通常的 HTTP 200，301，400 这些，很通用就不再解释。Status 也就是 gRPC 的 status， 而 Status-Message 则是 gRPC 的 message。Status-Message 采用了 Percent-Encoded 的编码方式，具体参考这里。&lt;/p&gt;

&lt;p&gt;如果在最后收到的 HEADERS frame 里面，带上了 Trailers，并且有 END_STREAM 这个 flag，那么就意味着 response 的 EOS。&lt;/p&gt;

&lt;h3 id=&quot;protobuf&quot;&gt;Protobuf&lt;/h3&gt;
&lt;p&gt;gRPC 的 service 接口是基于 protobuf 定义的，我们可以非常方便的将 service 与 HTTP/2 关联起来。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Path : /Service-Name/{method name}&lt;/li&gt;
  &lt;li&gt;Service-Name : ?( {proto package name} “.” ) {service name}&lt;/li&gt;
  &lt;li&gt;Message-Type : {fully qualified proto message name}&lt;/li&gt;
  &lt;li&gt;Content-Type : “application/grpc+proto”&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Lewin</name></author><category term="gRPC" /><summary type="html">gRPC 是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于 HTTP/2 协议标准而设计，基于 ProtoBuf (Protocol Buffers) 序列化协议开发，且支持众多开发语言。</summary></entry><entry><title type="html">nova 虚拟机镜像从创建到文件系统 resize 完整流程</title><link href="https://lewinz.org/2021/08/01/openstack-nova-image-resize/" rel="alternate" type="text/html" title="nova 虚拟机镜像从创建到文件系统 resize 完整流程" /><published>2021-08-01T00:00:00+08:00</published><updated>2021-08-01T00:00:00+08:00</updated><id>https://lewinz.org/2021/08/01/openstack-nova-image-resize</id><content type="html" xml:base="https://lewinz.org/2021/08/01/openstack-nova-image-resize/">&lt;h2 id=&quot;虚拟机镜像的创建和-resize-流程&quot;&gt;虚拟机镜像的创建和 resize 流程&lt;/h2&gt;
&lt;p&gt;nova 创建虚拟机涉及的组件比较多，调用比较复杂，这里只列出跟虚拟机镜像创建相关的流程，方便理清虚拟机状态变化的整个流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nova-api&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServersController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 接受创建请求，解析出 image_uuid
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 调用 glance api 获取 image 对象
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conductor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalComputeTaskAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conductor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConductorManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 此处虽然接收 block_device_mapping 参数，但是是为了兼容旧版，没有使用。实际通过 nova.objects.BlockDeviceMappingList.get_by_instance_uuid() 获取
&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpcapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_and_run_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 使用 cast 方法调用 nova-compute 的 build_and_run_instance 方法。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;nova-compute&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_and_run_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_do_build_and_run_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_build_and_run_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_build_resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComputeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_prep_block_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_block_devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriverImageBlockDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LibvirtDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spwan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LibvirtDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 此处会判断如果不是从 volume 启动，则调用 imagebackend 去创建虚拟机镜像
&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LibvirtDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_try_fetch_image_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagebackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagebackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagebackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbd_utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBDDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 创建虚拟机镜像，此处如果所使用的 image 后端不支持 clone，或者镜像不可 clone（比如 rbd 中不是 raw 格式的镜像），会触发异常，create_image 调用下面的 fetch_image 函数
&lt;/span&gt;                
                &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_to_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_convert_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 将镜像拷贝到本地的/var/lib/instances/_base/目录下，文件名为 md5(image).part，然后用 qemu-img convert 转换为 raw 格式，名为 md5(image).converted，最后重命名为 md5(image)
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbd_utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBDDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 这一步是在 clone 失败，执行 fetch_image 的情况下，判断虚拟机镜像不存在，执行 import_image 将 fetch 的镜像导入到 RBD 后端作为虚拟机镜像。
&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbd_utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RBDDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 调整虚拟机镜像大小
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;nova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagebackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 调整虚拟机镜像大小，RBD 后端实际上在 create_image 时已经 resize 了，不会执行这一步，这里应该是为了确保其他后端能够正确设置虚拟机镜像的大小
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了便于分析，用 graphviz 画了在 nova-compute 的调用关系图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/openstack_nova_image_resize.png&quot; alt=&quot;openstack_nova_image_resize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注：存储后端用的是 Ceph，所以调用的后端代码是 nova.virt.libvirt.imagebackend.Rbd，如果 nova 使用了不同的后端，比如本地的 qcow2 镜像、raw 镜像、lvm 等，只需要对照 nova.virt.libvirt.imagebackend 中提供的对应实现，出入不会太大，因为它们都继承 nova.virt.libvirt.imagebackend.Image，有相同的接口。&lt;/p&gt;

&lt;p&gt;至此，虚拟机的镜像已经创建完毕，并且 resize 为 flavor 所设置的大小。后面是虚拟机启动后，resize 分区和文件系统的过程。&lt;/p&gt;

&lt;p&gt;一般虚拟机镜像中会安装 cloud-init 或者配置启动脚本来对虚拟机做初始化配置。在 cloud-init 或启动脚本中调用 growpart 和 resizefs 来完成分区和文件系统的扩容。&lt;/p&gt;

&lt;h2 id=&quot;分区的-resize&quot;&gt;分区的 resize&lt;/h2&gt;
&lt;p&gt;cloud-init 支持使用 growpart 和 gpart 对分区进行扩容，时配置的 mode 而定，默认会按顺序检测系统中是否安装了这两个工具，使用第一个找到的。&lt;/p&gt;

&lt;p&gt;growpart 是 AWS 的扩展分区工具，它分别使用 sfdisk 和 sgdisk 对 MBR 和 GPT 分区表操作，先将分区表导出，然后改写分区的其实扇区位置，最后将改写后的分区表导入，完成分区的扩容。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# growpart [diskdev] [partnum]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;gpart 是 FreeBSD 推出的磁盘管理工具，GPT 分区表将 metadata 的主本保存在硬盘的开始，将副本保存在硬盘的末尾，所以当虚拟机镜像被扩容，相当于硬盘的容量变大，在 GPT 看来末尾的 metadata 副本丢失了，需要先执行 recover 命令恢复，然后再进行扩容。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# gpart recover [diskdev]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# gpart resize -i [partnum] [diskdev]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;文件系统的-resize&quot;&gt;文件系统的 resize&lt;/h2&gt;
&lt;p&gt;cloud-init 通过依次尝试解析 /proc/$$/mountinfo、/etc/mtab 和 mount 命令的输出，来获取根目录所挂载的分区和文件系统格式。&lt;/p&gt;

&lt;p&gt;针对不通的文件系统，使用不同的命令扩容：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# resize2fs [devpth]    # ext 文件系统&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# xfs_growfs [devpth]    # xfs 文件系统&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# growfs [devpth]        # ufs 文件系统&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# btrfs filesystem resize max [mount_point]    # btrfs 文件系统&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Lewin</name></author><category term="openstack" /><category term="nova" /><category term="image" /><category term="resize" /><summary type="html">虚拟机镜像的创建和 resize 流程 nova 创建虚拟机涉及的组件比较多，调用比较复杂，这里只列出跟虚拟机镜像创建相关的流程，方便理清虚拟机状态变化的整个流程。</summary></entry></feed>