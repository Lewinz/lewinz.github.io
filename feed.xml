<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://lewinz.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lewinz.org/" rel="alternate" type="text/html" /><updated>2022-03-01T19:23:28+08:00</updated><id>https://lewinz.org/feed.xml</id><title type="html">阿嫂</title><subtitle>阿嫂个人博客</subtitle><author><name>Lewin</name></author><entry><title type="html">golang nil!=nil 问题</title><link href="https://lewinz.org/2022/02/17/golang-nil!=nil/" rel="alternate" type="text/html" title="golang nil!=nil 问题" /><published>2022-02-17T00:00:00+08:00</published><updated>2022-02-17T00:00:00+08:00</updated><id>https://lewinz.org/2022/02/17/golang-nil!=nil</id><content type="html" xml:base="https://lewinz.org/2022/02/17/golang-nil!=nil/">&lt;h2 id=&quot;问题一err-为-nil那么-err--nil-就一定为-false-吗&quot;&gt;问题一：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err != nil&lt;/code&gt; 就一定为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; 吗？&lt;/h2&gt;
&lt;p&gt;上代码&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先 returnErr() 返回了一个值为 nil 的 *Err，然后赋值给了变量 err，那么 fmt 打印的结果是什么呢？实际上是：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;nil&amp;gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那为什么值为 nil 的 *Err 不等于 nil 呢？简单说，interface 被两个元素 value 和 type 所表示。只有在 value 和 type 同时为 nil 的时候，判断 interface == nil 才会为 true。而 err = returnErr() 这个过程中，虽然 value 为 nil，但 type 却为 *Err。&lt;/p&gt;

&lt;p&gt;那怎么避免这个问题呢，err 变量不再前置声明，代码改为如下所示：&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个时候 fmt 打印出来的结果就是：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;nil&amp;gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;问题二err--nil-的问题&quot;&gt;问题二：err == nil 的问题&lt;/h2&gt;
&lt;p&gt;先看标准库的一段代码：&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 请注意，为什么这里会判断是否为 nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;nil&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;address &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么在方法内还要做一次 e == nil 的判断呢？方法和变量是存储在不同区域的，当我们使用空指针类型的变量调用方法时，该方法还是会被调用，只有在被进行解指针操作时，才会 panic。&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;print constant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintOther&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;print other&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Err&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrintConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrintOther&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面例子中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrintConstant&lt;/code&gt; 方法未进行解指针操作，是可以正常打印的；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt;方法中进行了解指针操作，所以会 panic；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrintOther&lt;/code&gt; 方法的接受者是 Err 而非 *Err，在调用时就会进行解指针操作，所以也是会 panic 的。&lt;/p&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="nil" /><summary type="html">问题一：err 为 nil，那么 err != nil 就一定为 false 吗？ 上代码 ``` golang type Err struct { err string }</summary></entry><entry><title type="html">记录 golang range 值拷贝的一个坑</title><link href="https://lewinz.org/2022/02/11/record-gorange-pointer/" rel="alternate" type="text/html" title="记录 golang range 值拷贝的一个坑" /><published>2022-02-11T00:00:00+08:00</published><updated>2022-02-11T00:00:00+08:00</updated><id>https://lewinz.org/2022/02/11/record-gorange-pointer</id><content type="html" xml:base="https://lewinz.org/2022/02/11/record-gorange-pointer/">&lt;h2 id=&quot;问题背景&quot;&gt;问题背景&lt;/h2&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoTypeAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cateType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stoTypeAppend&lt;/code&gt; 函数的作用是在「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeInfo.StorageTypes&lt;/code&gt;」中寻找「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CategoryType&lt;/code&gt;」与参数「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cateType&lt;/code&gt;」相等的元素，对字段「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Others&lt;/code&gt;」进行 append 操作。&lt;/p&gt;

&lt;p&gt;所以我最开始的代码是这样的：&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initStorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before append ====== %#v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;stoTypeAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after append ====== %#v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoTypeAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cateType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cateType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;appendOther&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initStorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;before append &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; &amp;amp;raccoon.StorageTypeInfo&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;StorageTypes:[]raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}&lt;/span&gt;, raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type2&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}}}&lt;/span&gt;

after append &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; &amp;amp;raccoon.StorageTypeInfo&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;StorageTypes:[]raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}&lt;/span&gt;, raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type2&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt; 之后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CategoryType&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type1&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StorageTypes&lt;/code&gt; 并没有像预期的一样增加长度。&lt;/p&gt;

&lt;h2 id=&quot;排查问题&quot;&gt;排查问题&lt;/h2&gt;
&lt;p&gt;最开始以为是因为函数值传递的时候，拷贝指针时，参数下字段包含的切片地址传递的是第一个元素的地址（这部分的解释请看前面发布的博客内容），后面经过思考和单测之后，排除了这个可能，因为函数、方法在值传递的时候，只会拷贝值本身，例如这个例子传递的是指针，那么传递时会将指针类型对应的值拷贝一遍，但拷贝之后的值依旧是指向最原始的内存地址。&lt;/p&gt;

&lt;h2 id=&quot;解决问题&quot;&gt;解决问题&lt;/h2&gt;
&lt;p&gt;经过深（qing）思（jiao）熟（da）虑（lao）之后，发现是因为 for range 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stoType&lt;/code&gt; 是从切片中拷贝出来的值，所以对这个值进行改变，并不能修改切片的值。&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initStorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before append ====== %#v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;stoTypeAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after append ====== %#v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoTypeAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cateType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cateType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;appendOther&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initStorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;StorageTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CategoryType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Others&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果输出：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;before append &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; &amp;amp;raccoon.StorageTypeInfo&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;StorageTypes:[]raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}&lt;/span&gt;, raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type2&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}}}&lt;/span&gt;

after append &lt;span class=&quot;o&quot;&gt;======&lt;/span&gt; &amp;amp;raccoon.StorageTypeInfo&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;StorageTypes:[]raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;appendOther&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}&lt;/span&gt;, raccoon.StorageType&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;CategoryType:&lt;span class=&quot;s2&quot;&gt;&quot;type2&quot;&lt;/span&gt;, Others:[]raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;raccoon.Other&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name:&lt;span class=&quot;s2&quot;&gt;&quot;other2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;其实不止是 slice，map 在 for range 的时候也会进行值拷贝，当我们使用 for range 获取到数据时，最好不要使用指针进行数据修改，以免掉入各种坑。&lt;/p&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="range" /><category term="pointer" /><summary type="html">问题背景 ``` golang type StorageTypeInfo struct{ StorageTypes []StorageType }</summary></entry><entry><title type="html">CPU NUMA 架构</title><link href="https://lewinz.org/2022/01/28/cpu-numa/" rel="alternate" type="text/html" title="CPU NUMA 架构" /><published>2022-01-28T00:00:00+08:00</published><updated>2022-01-28T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/28/cpu-numa</id><content type="html" xml:base="https://lewinz.org/2022/01/28/cpu-numa/">&lt;blockquote&gt;
  &lt;p&gt;作者：卢钧轶 (cenalulu) 本文原文地址：http://cenalulu.github.io/linux/numa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;numa-简介&quot;&gt;NUMA 简介&lt;/h2&gt;
&lt;h3 id=&quot;为什么要有-numa&quot;&gt;为什么要有 NUMA&lt;/h3&gt;
&lt;p&gt;在 NUMA 架构出现前，CPU 欢快的朝着频率越来越高的方向发展。受到物理极限的挑战，又转为核数越来越多的方向发展。如果每个 core 的工作性质都是 share-nothing（类似于 map-reduce 的 node 节点的作业属性），那么也许就不会有 NUMA。由于所有 CPU Core 都是通过共享一个北桥来读取内存，随着核数如何的发展，北桥在响应时间上的性能瓶颈越来越明显。于是，聪明的硬件设计师们，先到了把内存控制器（原本北桥中读取内存的部分）也做个拆分，平分到了每个 die 上。于是 NUMA 就出现了！&lt;/p&gt;

&lt;h3 id=&quot;numa-是什么&quot;&gt;NUMA 是什么&lt;/h3&gt;
&lt;p&gt;NUMA 中，虽然内存直接 attach 在 CPU 上，但是由于内存被平均分配在了各个 die 上。只有当 CPU 访问自身直接 attach 内存对应的物理地址时，才会有较短的响应时间（后称 Local Access）。而如果需要访问其他 CPU attach 的内存的数据时，就需要通过 inter-connect 通道访问，响应时间就相比之前变慢了（后称 Remote Access）。所以 NUMA（Non-Uniform Memory Access）就此得名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/cpu_numa_1.png&quot; alt=&quot;cpu_numa_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;我们需要为-numa-做什么&quot;&gt;我们需要为 NUMA 做什么&lt;/h2&gt;
&lt;p&gt;假设你是 Linux 教父 Linus，对于 NUMA 架构你会做哪些优化？下面这点是显而易见的：&lt;/p&gt;

&lt;p&gt;既然 CPU 只有在 Local-Access 时响应时间才能有保障，那么我们就尽量把该 CPU 所要的数据集中在他 local 的内存中就 OK 啦～&lt;/p&gt;

&lt;p&gt;没错，事实上 Linux 识别到 NUMA 架构后，默认的内存分配方案就是：优先尝试在请求线程当前所处的 CPU 的 Local 内存上分配空间。如果 local 内存不足，优先淘汰 local 内存中无用的 Page（Inactive，Unmapped）。 那么，问题来了。。。&lt;/p&gt;

&lt;h2 id=&quot;numa-的-七宗罪&quot;&gt;NUMA 的 “七宗罪”&lt;/h2&gt;
&lt;p&gt;几乎所有的运维都会多多少少被 NUMA 坑害过，让我们看看究竟有多少种在 NUMA 上栽的方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL – &lt;a href=&quot;http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/&quot;&gt;The MySQL “swap insanity” problem and the effects of the NUMA architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PostgreSQL – &lt;a href=&quot;http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html&quot;&gt;PostgreSQL, NUMA and zone reclaim mode on linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Oracle – &lt;a href=&quot;http://blog.yannickjaquier.com/hpux/non-uniform-memory-access-numa-architecture-with-oracle-database-by-examples.html&quot;&gt;Non-Uniform Memory Access (NUMA) architecture with Oracle database by examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java – &lt;a href=&quot;http://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases&quot;&gt;Optimizing Linux Memory Management for Low-latency / High-throughput Databases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;究其原因几乎都和：“因为 CPU 亲和策略导致的内存分配不平均” 及 “NUMA Zone Claim 内存回收” 有关，而和数据库种类并没有直接联系。所以下文我们就拿 MySQL 为例，来看看重内存操作应用在 NUMA 架构下到底会出现什么问题。&lt;/p&gt;

&lt;h2 id=&quot;mysql-在-numa-架构上会出现的问题&quot;&gt;MySQL 在 NUMA 架构上会出现的问题&lt;/h2&gt;
&lt;p&gt;几乎所有 NUMA + MySQL 关键字的搜索结果都会指向：Jeremy Cole 大神的两篇文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/&quot;&gt;The MySQL “swap insanity” problem and the effects of the NUMA architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/&quot;&gt;A brief update on NUMA and MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大神解释的非常详尽，有兴趣的读者可以直接看原文。博主这里做一个简单的总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU 规模因摩尔定律指数级发展，而总线发展缓慢，导致多核 CPU 通过一条总线共享内存成为瓶颈&lt;/li&gt;
  &lt;li&gt;于是 NUMA 出现了，CPU 平均划分为若干个 Chip（不多于 4 个），每个 Chip 有自己的内存控制器及内存插槽&lt;/li&gt;
  &lt;li&gt;CPU 访问自己 Chip 上所插的内存时速度快，而访问其他 CPU 所关联的内存（下文称 Remote Access）的速度相较慢三倍左右&lt;/li&gt;
  &lt;li&gt;于是 Linux 内核默认使用 CPU 亲和的内存分配策略，使内存页尽可能的和调用线程处在同一个 Core/Chip 中&lt;/li&gt;
  &lt;li&gt;由于内存页没有动态调整策略，使得大部分内存页都集中在 CPU 0 上&lt;/li&gt;
  &lt;li&gt;又因为 Reclaim 默认策略优先淘汰 / Swap 本 Chip 上的内存，使得大量有用内存被换出&lt;/li&gt;
  &lt;li&gt;当被换出页被访问时问题就以数据库响应时间飙高甚至阻塞的形式出现了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/cpu_numa_2.png&quot; alt=&quot;cpu_numa_2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;Jeremy Cole 大神推荐的三个方案如下，如果想详细了解可以阅读 &lt;a href=&quot;http://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;numactl –interleave=all&lt;/li&gt;
  &lt;li&gt;在 MySQL 进程启动前，使用 sysctl -q -w vm.drop_caches=3 清空文件缓存所占用的空间&lt;/li&gt;
  &lt;li&gt;Innodb 在启动时，就完成整个 Innodb_buffer_pool_size 的内存分配&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个方案也被业界普遍认可可行，同时在 &lt;a href=&quot;https://github.com/twitter/mysql/commit/19cf63c596c0146a72583998d138190cc285df5c&quot;&gt;Twitter 的 5.5patch&lt;/a&gt; 和 &lt;a href=&quot;http://www.percona.com/doc/percona-server/5.5/performance/innodb_numa_support.html&quot;&gt;Percona 5.5 Improved NUMA Support&lt;/a&gt; 中作为功能被支持。&lt;/p&gt;

&lt;p&gt;不过这种三合一的解决方案只是减少了 NUMA 内存分配不均，导致的 MySQL SWAP 问题出现的可能性。如果当系统上其他进程，或者 MySQL 本身需要大量内存时，Innodb Buffer Pool 的那些 Page 同样还是会被 Swap 到存储上。于是又在这基础上出现了另外几个进阶方案&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置 vm.zone_reclaim_mode = 0 使得内存不足时去remote memory分配优先于 swap out local page&lt;/li&gt;
  &lt;li&gt;echo -15 &amp;gt; /proc/&lt;pid_of_mysqld&gt;/oom_adj 调低 MySQL 进程被 OOM_killer 强制 Kill 的可能&lt;/pid_of_mysqld&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/server-options.html#option_mysqld_memlock&quot;&gt;memlock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;对 MySQL 使用 Huge Page（黑魔法，巧用了 Huge Page 不会被 swap 的特性）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;重新审视问题&quot;&gt;重新审视问题&lt;/h2&gt;
&lt;p&gt;如果本文写到这里就这么结束了，那和搜索引擎结果中大量的 Step-by-Step 科普帖没什么差别。虽然我们用了各种参数调整减少了问题发生概率，那么真的就彻底解决了这个问题么？问题根源究竟是什么？让我们回过头来重新审视下这个问题：&lt;/p&gt;

&lt;h3 id=&quot;numa-interleave-真的好么&quot;&gt;NUMA Interleave 真的好么？&lt;/h3&gt;
&lt;p&gt;为什么 Interleave 的策略就解决了问题？ 借用两张 Carrefour 性能测试 的结果图，可以看到几乎所有情况下 Interleave 模式下的程序性能都要比默认的亲和模式要高，有时甚至能高达 30%。究其根本原因是 Linux 服务器的大多数 workload 分布都是随机的：即每个线程在处理各个外部请求对应的逻辑时，所需要访问的内存是在物理上随机分布的。而 Interleave 模式就恰恰是针对这种特性将内存 page 随机打散到各个 CPU Core 上，使得每个 CPU 的负载和 Remote Access 的出现频率都均匀分布。相较 NUMA 默认的内存分配模式，死板的把内存都优先分配在线程所在 Core 上的做法，显然普遍适用性要强很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/cpu_numa_3.png&quot; alt=&quot;cpu_numa_3&quot; /&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/cpu_numa_4.png&quot; alt=&quot;cpu_numa_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说，像 MySQL 这种外部请求随机性强，各个线程访问内存在地址上平均分布的这种应用，Interleave 的内存分配模式相较默认模式可以带来一定程度的性能提升。 此外 各种 论文 中也都通过实验证实，真正造成程序在 NUMA 系统上性能瓶颈的并不是 Remote Acess 带来的响应时间损耗，而是内存的不合理分布导致 Remote Access 将 inter-connect 这个小水管塞满所造成的结果。而 Interleave 恰好，把这种不合理分布情况下的 Remote Access 请求平均分布在了各个小水管中。所以这也是 Interleave 效果奇佳的一个原因。&lt;/p&gt;

&lt;p&gt;那是不是简简单单的配置个 Interleave 就已经把 NUMA 的特性和性能发挥到了极致呢？ 答案是否定的，目前 Linux 的内存分配机制在 NUMA 架构的 CPU 上还有一定的改进空间。例如：&lt;strong&gt;Dynamic Memory Relocation&lt;/strong&gt;, &lt;strong&gt;Page Replication&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Memory Relocation&lt;/strong&gt; 我们来想一下这个情况：MySQL 的线程分为两种，用户线程（SQL 执行线程）和内部线程（内部功能，如：flush，io，master 等）。对于用户线程来说随机性相当的强，但对于内部线程来说他们的行为以及所要访问的内存区域其实是相对固定且可以预测的。如果能对于这把这部分内存集中到这些内存线程所在的 core 上的时候，就能减少大量 Remote Access，潜在的提升例如 Page Flush，Purge 等功能的吞吐量，甚至可以提高 MySQL Crash 后 Recovery 的速度（由于 recovery 是单线程）。 那是否能在 Interleave 模式下，把那些明显应该聚集在一个 CPU 上的内存集中在一起呢？ 很可惜，Dynamic Memory Relocation 这种技术目前只停留在理论和实验阶段。我们来看下难点：要做到按照线程的行为动态的调整 page 在 memory 的分布，就势必需要做线程和内存的实时监控（profile）。对于 Memory Access 这种非常异常频繁的底层操作来说增加 profile 入口的性能损耗是极大的。在 关于 CPU Cache 程序应该知道的那些事的评论中我也提到过，这个道理和为什么 Linux 没有全局监控 CPU L1/L2 Cache 命中率工具的原因是一样的。当然优化不会就此停步。上文提到的 Carrefour 算法和 Linux 社区的 Auto NUMA patch 都是积极的尝试。什么时候内存 profile 出现硬件级别，类似于 CPU 中 PMU 的功能时，动态内存规划就会展现很大的价值，甚至会作为 Linux Kernel 的一个内部功能来实现。到那时我们再回过头来审视这个方案的实际价值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Page Replication&lt;/strong&gt; 再来看一下这些情况：一些动态加载的库，把他们放在任何一个线程所在的 CPU 都会导致其他 CPU 上线程的执行效率下降。而这些共享数据往往读写比非常高，如果能把这些数据的副本在每个 Memory Zone 内都放置一份，理论上会带来较大的性能提升，同时也减少在 inter-connect 上出现的瓶颈。实时上，仍然是上文提到的 Carrefour 也做了这样的尝试。由于缺乏硬件级别（如 MESI 协议的硬件支持）和操作系统原生级别的支持，Page Replication 在数据一致性上维护的成本显得比他带来的提升更多。因此这种尝试也仅仅停留在理论阶段。当然，如果能得到底层的大力支持，相信这个方案还是有极大的实际价值的。&lt;/p&gt;

&lt;h3 id=&quot;究竟是哪里出了问题&quot;&gt;究竟是哪里出了问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NUMA&lt;/strong&gt; 的问题？ NUMA 本身没有错，是 CPU 发展的一种必然趋势。但是 NUMA 的出现使得操作系统不得不关注内存访问速度不平均的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Kernel&lt;/strong&gt; 内存分配策略的问题？ 分配策略的初衷是好的，为了内存更接近需要他的线程，但是没有考虑到数据库这种大规模内存使用的应用场景。同时缺乏动态调整的功能，使得这种悲剧在内存分配的那一刻就被买下了伏笔。&lt;/p&gt;

&lt;p&gt;数据库设计者不懂 NUMA？ 数据库设计者也许从一开始就不会意识到 NUMA 的流行，或者甚至说提供一个透明稳定的内存访问是操作系统最基本的职责。那么在现状改变非常困难的情况下（下文会提到为什么困难）是不是作为内存使用者有义务更好的去理解使用 NUMA？&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;其实无论是 NUMA 还是 Linux Kernel，亦或是程序开发他们都没有错，只是还做得不够极致。如果 NUMA 在硬件级别可以提供更多低成本的 profile 接口；如果 Linux Kernel 可以使用更科学的动态调整策略；如果程序开发人员更懂 NUMA，那么我们完全可以更好的发挥 NUMA 的性能，使得无限横向扩展 CPU 核数不再是一个梦想。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.percona.com/doc/percona-server/5.5/performance/innodb_numa_support.html&quot;&gt;Percona NUMA aware Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scalemysql.com/blog/2014/09/05/numa-system-performance-issues-more-than-just-swapping-to-consider/&quot;&gt;Numa system performance issues – more than just swapping to consider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mikaelronstrom.blogspot.com/2010/12/mysql-server-and-numa-architectures.html&quot;&gt;MySQL Server and NUMA architectures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.wl0.org/2012/09/checking-procnuma_maps-can-be-dangerous-for-mysql-client-connections/&quot;&gt;Checking /proc/pid/numa_maps can be dangerous for mysql client connections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dom.as/2014/01/17/on-swapping-and-kernels/&quot;&gt;on swapping and kernels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases&quot;&gt;Optimizing Linux Memory Management for Low-latency / High-throughput Databases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lst.inf.ethz.ch/people/alumni/zmajo/publications/11-systor.pdf&quot;&gt;Memory System Performance in a NUMA Multicore Multiprocessor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sfu.ca/~sba70/files/atc11-blagodurov.pdf&quot;&gt;A Case for NUMA-aware Contention Management on Multicore Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Lewin</name></author><category term="cpu" /><category term="numa" /><summary type="html">作者：卢钧轶 (cenalulu) 本文原文地址：http://cenalulu.github.io/linux/numa</summary></entry><entry><title type="html">MySQL 日志篇</title><link href="https://lewinz.org/2022/01/25/mysql-log/" rel="alternate" type="text/html" title="MySQL 日志篇" /><published>2022-01-25T00:00:00+08:00</published><updated>2022-01-25T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/25/mysql-log</id><content type="html" xml:base="https://lewinz.org/2022/01/25/mysql-log/">&lt;h2 id=&quot;错误日志&quot;&gt;错误日志&lt;/h2&gt;

&lt;p&gt;默认情况下，错误日志是开启的，且无法被禁止。默认情况下，错误日志是存储在数据库的数据文件目录中，名称为 hostname.err，其中，hostname 为服务器主机名。&lt;/p&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;
&lt;p&gt;为了方便管理，用户可以根据自己的需求来配置错误日志存储位置和日志级别，配置参数如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_error = on | 文件路径&lt;/code&gt; 是否启用错误日志，on 表示开启，文件路径表示指定自定义日志路径&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_warnings = 1|0&lt;/code&gt; 是否记录 warnings 信息到错误日志中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;记录信息&quot;&gt;记录信息&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;服务器启动和关闭过程中的信息
    &lt;blockquote&gt;
      &lt;p&gt;未必是错误信息，比如 mysql 是如何去初始化存储引擎的过程记录在错误日志里等等&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;服务器运行过程中的错误信息
    &lt;blockquote&gt;
      &lt;p&gt;比如 sock 文件找不到，无法加载 mysql 数据库的数据文件，如果忘记初始化 mysql 或 data dir 路径找不到，或权限不正确等 都会记录在此&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;事件调度器运行一个事件时产生的信息
    &lt;blockquote&gt;
      &lt;p&gt;一旦 mysql 调度启动一个计划任务的时候，它也会将相关信息记录在错误日志中&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;在从服务器上启动从服务器进程时产生的信息
    &lt;blockquote&gt;
      &lt;p&gt;在复制环境下，从服务器进程的信息也会被记录进错误日志&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;删除错误日志&quot;&gt;删除错误日志&lt;/h3&gt;
&lt;p&gt;在 mysql5.5.7 之前：数据库管理员可以删除很长时间之前的错误日志，以保证 mysql 服务器上的硬盘空间。mysql 数据库中，可以使用 mysqladmin 命令开启新的错误日志。mysqladmin 命令的语法如下：&lt;/p&gt;

&lt;p&gt;mysqladmin –u root –pflush-logs
也可以使用登录 mysql 数据库中使用 FLUSHLOGS 语句来开启新的错误日志。&lt;/p&gt;

&lt;p&gt;在 mysql5.5.7 之后：服务器将关闭此项功能。只能使用重命名原来的错误日志文件，手动冲洗日志创建一个新的：方式如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@stu18 data]# &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;stu18.magedu.com.err  stu18.magedu.com.err.old
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@stu18 data]# mysqladmin flush-logs
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@stu18 data]# &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;hellodb  myclass  mysql-bin.000003  mysql-bin.index           stu18.magedu.com.pid     ibdata1      mysql     mysql-bin.000004  performance_schema    ib_logfile0  mysql-bin.000001  stu18.magedu.com.err           &lt;span class=&quot;nb&quot;&gt;test   &lt;/span&gt;ib_logfile1  mysql-bin.000002  stu18.magedu.com.err.old
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查询日志&quot;&gt;查询日志&lt;/h2&gt;
&lt;p&gt;查询日志在 MySQL 中被称为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;general log&lt;/code&gt; (通用日志)，查询日志里的内容不要被 “查询日志” 误导，认为里面只存储 select 语句，其实不然，查询日志里面记录了数据库执行的所有命令，不管语句是否正确，都会被记录，具体原因如下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;insert 查询为了避免数据冲突，如果此前插入过数据，当前插入的数据如果跟主键或唯一键的数据重复那肯定会报错&lt;/li&gt;
  &lt;li&gt;update 时也会查询因为更新的时候很可能会更新某一块数据&lt;/li&gt;
  &lt;li&gt;delete 查询，只删除符合条件的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此都会产生日志，在并发操作非常多的场景下，查询信息会非常多，那么如果都记录下来会导致 IO 非常大，影响 MySQL 性能，因此如果不是在调试环境下，是不建议开启查询日志功能的。&lt;/p&gt;

&lt;p&gt;查询日志的开启有助于帮助我们分析哪些语句执行密集，执行密集的 select 语句对应的数据是否能够被缓存，同时也可以帮助我们分析问题，所以，我们可以根据自己的实际情况来决定是否开启查询日志。&lt;/p&gt;

&lt;h3 id=&quot;配置-1&quot;&gt;配置&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;参数 general_log 用来控制开启、关闭 MySQL 查询日志&lt;/li&gt;
  &lt;li&gt;参数 general_log_file 用来控制查询日志的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以如果你要判断 MySQL 数据库是否开启了查询日志，可以使用下面命令。general_log 为 ON 表示开启查询日志，OFF 表示关闭查询日志。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show variables like &lt;span class=&quot;s1&quot;&gt;'%general_log%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+------------------+------------------------------+
| Variable_name    | Value                        |
+------------------+------------------------------+
| general_log      | OFF                          |
| general_log_file | /var/lib/mysql/DB-Server.log |
+------------------+------------------------------+
2 rows &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果开启了查询日志，参数 log_output 控制着查询日志的存储方式， log_output 可以设置为以下 4 种值:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FILE : 表示日志存储在文件中&lt;/li&gt;
  &lt;li&gt;TABLE : 表示日志存储在 mysql 库中的 general_log 表中&lt;/li&gt;
  &lt;li&gt;FILE, TABLE : 表示将日志同时存储在文件和 general_log 表中，改值会徒增很多 IO 压力，一般不会这样设置&lt;/li&gt;
  &lt;li&gt;NONE : 表示不记录日志，即使 general_log 设置为 ON， 如果 log_output 设置为 NONE，也不会记录查询日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;log_output 不仅控制查询日志的输出，也控制着慢查询日志的输出，即: log_output 设置为 FILE，就表示查询日志和慢查询日志都存放在文件中，设置为 TABLE，查询日志和慢查询日志都存放在 mysql 库中的 general_log 表中&lt;/p&gt;

&lt;p&gt;查看 log_output 设置:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show variables like &lt;span class=&quot;s1&quot;&gt;'log_output'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_output    | FILE  |
+---------------+-------+
1 row &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;慢日志&quot;&gt;慢日志&lt;/h2&gt;
&lt;p&gt;慢查询会导致 CPU，IOPS，内存消耗过高。当数据库遇到性能瓶颈时，大部分时间都是由于慢查询导致的。 开启慢查询日志，可以让 MySQL 记录下查询超过指定时间的语句，之后运维人员通过定位分析，能够很好的优化数据库性能。&lt;/p&gt;

&lt;p&gt;慢查询日志记录的慢查询不仅仅是执行比较慢的 SELECT 语句，还有 INSERT，DELETE，UPDATE，CALL 等 DML 操作，只要超过了指定时间，都可以称为 “慢查询”，被记录到慢查询日志中。&lt;/p&gt;

&lt;p&gt;默认情况下，慢查询日志是不开启的，只有手动开启了，慢查询才会被记录到慢查询日志中。&lt;/p&gt;

&lt;h3 id=&quot;配置-2&quot;&gt;配置&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;c&quot;&gt;# 开启慢日志&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;slow_query_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;c&quot;&gt;# 慢查询指定时间设置，表示 &quot;多长时间的查询&quot; 被认定为 &quot;慢查询&quot;，单位是秒 (s)，默认是 10s，即超过 10s 的查询都被认定为慢查询。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;long_query_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20
&lt;span class=&quot;c&quot;&gt;# 表示如果运行的 SQL 语句没有使用到索引，是否也被当作慢查询语句记录到慢查询记录中，OFF 表示不记录，ON 表示记录。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;log_queries_not_using_indexes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on
&lt;span class=&quot;c&quot;&gt;# 当使用文件存储慢查询日志时 (log_output 设置为 &quot;FILE&quot; 或者 &quot;FILE,TABLE&quot; 时)，制定慢查询日志存储在哪个文件中，默认的文件名是 &quot;主机名 - slow.log&quot;，存储目录为数据目录&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;slow_query_log_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;slow.log
&lt;span class=&quot;c&quot;&gt;# MySQL5.6.5 版本新引入的参数，用来限制没有使用索引的语句每分钟记录到慢查询日志中的次数。在生产环境中，有可能有很多没有使用索引的语句，可能会导致慢查询日志快速增长。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;log_throttle_queries_not_using_indexes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;慢查询日志分析工具&quot;&gt;慢查询日志分析工具&lt;/h3&gt;
&lt;p&gt;pt-query-digest 是分析 MySQL 查询日志最有力的工具，该工具功能强大，它可以分析 binlog，Generallog，slowlog，也可以通过 show processlist 或者通过 tcpdump 抓取的 MySQL 协议数据来进行分析，比 mysqldumpslow 更具体，更完善。以下是使用 pt-query-digest 的示例:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//直接分析慢查询文件
pt-query-digest  slow.log &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; slow_report.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该工具可以将查询的剖析报告打印出来，可以分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间，次数，占比等，可以借助分析结果找出问题进行优化。&lt;/p&gt;

&lt;h2 id=&quot;事务日志&quot;&gt;事务日志&lt;/h2&gt;
&lt;p&gt;数据库数据存放的文件称为 data file；日志文件称为 log file；&lt;/p&gt;

&lt;p&gt;数据库数据是有缓存的，如果没有缓存，每次都写或者读物理 disk，那性能就太低下了。&lt;/p&gt;

&lt;p&gt;数据库数据的缓存称为 data buffer，日志（redo）缓存称为 log buffer；既然数据库数据有缓存，就很难保证缓存数据（脏数据）与磁盘数据的一致性。&lt;/p&gt;

&lt;p&gt;但是万一数据库发生断电，因为缓存的数据没有写入磁盘，导致缓存在内存中的数据丢失而导致数据不一致怎么办？&lt;/p&gt;

&lt;p&gt;为了保证事务的 ACID 特性，就不得不说 MySQL InnoDB 引擎的事务日志: 重做日志 redo 和回滚日志 undo&lt;/p&gt;

&lt;p&gt;innodb 通过 force log at commit 机制实现事务的持久性，即在事务提交的时候，必须先将该事务的所有事务日志写入到磁盘上的 redo log file 和 undo log file 中进行持久化。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：在数据库的世界里，数据从来都不重要，日志才是最重要的，有了日志就有了一切&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redo-日志&quot;&gt;Redo 日志&lt;/h3&gt;
&lt;h4 id=&quot;redo-日志简介&quot;&gt;Redo 日志简介&lt;/h4&gt;
&lt;p&gt;redo log 包括两部分：一是内存中的日志缓冲 (redo log buffer)，该部分日志是易失性的；二是磁盘上的重做日志文件 (redo log file)，该部分日志是持久的，并且是事务的记录是顺序追加的，性能非常高 (磁盘的顺序写性能逼内存的写性能差不了太多)&lt;/p&gt;

&lt;p&gt;InnoDB 使用日志来减少提交事务时的开销。因为日志中已经记录了事务，就无须在每个事务提交时把缓冲池的脏块刷新 (flush) 到磁盘中。事务修改的数据和索引通常会映射到表空间的随机位置，所以刷新这些变更到磁盘需要很多随机 IO。InnoDB 假设使用常规磁盘，随机 IO 比顺序 IO 昂贵得多，因为一个 IO 请求需要时间把磁头移到正确的位置，然后等待磁盘上读出需要的部分，再转到开始位置。&lt;/p&gt;

&lt;p&gt;InnoDB 用日志把随机 IO 变成顺序 IO。一旦日志安全写到磁盘，事务就持久化了，即使断电了，InnoDB 可以重放日志并且恢复已经提交的事务。&lt;/p&gt;

&lt;p&gt;为了确保每次日志都能写入到事务日志文件中，在每次将 log buffer 中的日志写入日志文件的过程中都会调用一次操作系统的 fsync 操作 (即 fsync () 系统调用)。因为 MariaDB/MySQL 是工作在用户空间的，MariaDB/MySQL 的 log buffer 处于用户空间的内存中。要写入到磁盘上的 log file 中 (redo:ib_logfileN 文件，undo:share tablespace 或.ibd 文件)，中间还要经过操作系统内核空间的 os buffer，调用 fsync () 的作用就是将 OS buffer 中的日志刷到磁盘上的 log file 中。&lt;/p&gt;

&lt;p&gt;也就是说，从 redo log buffer 写日志到磁盘的 redo log file 中，过程如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/mysql-log_1.jpg&quot; alt=&quot;mysql-log_1.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在此处需要注意一点，一般所说的 log file 并不是磁盘上的物理日志文件，而是操作系统缓存中的 log file，官方手册上的意思也是如此 (例如：With a value of 2, the contents of the InnoDB log buffer are written to the log file after each transaction commit and the log file is flushed to disk approximately once per second)。但说实话，这不太好理解，既然都称为 file 了，应该已经属于物理文件了。所以在本文后续内容中都以 os buffer 或者 file system buffer 来表示官方手册中所说的 Log file，然后 log file 则表示磁盘上的物理日志文件，即 log file on disk。另外，之所以要经过一层 os buffer，是因为 open 日志文件的时候，open 没有使用 O_DIRECT 标志位，该标志位意味着绕过操作系统层的 os buffer，IO 直写到底层存储设备。不使用该标志位意味着将日志进行缓冲，缓冲到了一定容量，或者显式 fsync () 才会将缓冲中的刷到存储设备。使用该标志位意味着每次都要发起系统调用。比如写 abcde，不使用 o_direct 将只发起一次系统调用，使用 o_object 将发起 5 次系统调用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MySQL 支持用户自定义在 commit 时如何将 log buffer 中的日志刷 log file 中。这种控制通过变量 innodb_flush_log_at_trx_commit 的值来决定。该变量有 3 种值：0、1、2，默认为 1。但注意，这个变量只是控制 commit 动作是否刷新 log buffer 到磁盘。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当设置为 0 的时候，事务提交时不会将 log buffer 中日志写入到 os buffer，而是每秒写入 os buffer 并调用 fsync () 写入到 log file on disk 中。也就是说设置为 0 时是 (大约) 每秒刷新写入到磁盘中的，当系统崩溃，会丢失 1 秒钟的数据。&lt;/li&gt;
  &lt;li&gt;当设置为 1 的时候，事务每次提交都会将 log buffer 中的日志写入 os buffer 并调用 fsync () 刷到 log file on disk 中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO 的性能较差。&lt;/li&gt;
  &lt;li&gt;当设置为 2 的时候，每次提交都仅写入到 os buffer，然后是每秒调用 fsync () 将 os buffer 中的日志写入到 log file on disk。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/mysql-log_2.jpg&quot; alt=&quot;mysql-log_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在主从复制结构中，要保证事务的持久性和一致性，需要对日志相关变量设置为如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果启用了二进制日志，则设置 sync_binlog=1，即每提交一次事务同步写到磁盘中。&lt;/li&gt;
  &lt;li&gt;总是设置 innodb_flush_log_at_trx_commit=1，即每提交一次事务都写到磁盘中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述两项变量的设置保证了：每次提交事务都写入二进制日志和事务日志，并在提交时将它们刷新到磁盘中。&lt;/p&gt;

&lt;h4 id=&quot;redo-日志参数&quot;&gt;Redo 日志参数&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;innodb_log_files_in_group
    &lt;blockquote&gt;
      &lt;p&gt;redo log 文件的个数，命名方式如：ib_logfile0，iblogfile1… iblogfilen。默认 2 个，最大 100 个。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_log_file_size
    &lt;blockquote&gt;
      &lt;p&gt;文件设置大小，默认值为 48M，最大值为 512G，注意最大值指的是整个 redo log 系列文件之和，即（innodb_log_files_in_group * innodb_log_file_size ）不能大于最大值 512G。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_log_group_home_dir
    &lt;blockquote&gt;
      &lt;p&gt;文件存放路径&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_log_buffer_size
    &lt;blockquote&gt;
      &lt;p&gt;Redo Log 缓存区，默认 8M，可设置 1-8M。延迟事务日志写入磁盘，把 redo log 放到该缓冲区，然后根据 innodb_flush_log_at_trx_commit 参数的设置，再把日志从 buffer 中 flush 到磁盘中。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_flush_log_at_trx_commit
    &lt;blockquote&gt;
      &lt;p&gt;innodb_flush_log_at_trx_commit=0，事务发生过程，日志一直激励在 redo log buffer 中，跟其他设置一样，但是在事务提交时，不产生 redo 写操作，而是 MySQL 内部每秒操作一次，从 redo log buffer，把数据写入到系统中去。如果发生 crash，即丢失 1s 内的事务修改操作&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;innodb_flush_log_at_trx_commit=1，每次 commit 都会把 redo log 从 redo log buffer 写入到 system，并 fsync 刷新到磁盘文件中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;innodb_flush_log_at_trx_commit=2，每次事务提交时 MySQL 会把日志从 redo log buffer 写入到 system，但只写入到 file system buffer，由系统内部来 fsync 到磁盘文件。如果数据库实例 crash，不会丢失 redo log，但是如果服务器 crash，由于 file system buffer 还来不及 fsync 到磁盘文件，所以会丢失这一部分的数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/mysql-log_3.jpg&quot; alt=&quot;mysql-log_3.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：由于进程调度策略问题，这个 “每秒执行一次 flush (刷到磁盘) 操作” 并不是保证 100% 的 “每秒”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;undo-日志&quot;&gt;undo 日志&lt;/h3&gt;
&lt;h4 id=&quot;undo-日志简介&quot;&gt;undo 日志简介&lt;/h4&gt;
&lt;p&gt;undo log 有两个作用：提供回滚和多个行版本控制 (MVCC)。&lt;/p&gt;

&lt;p&gt;在数据修改的时候，不仅记录了 redo，还记录了相对应的 undo，如果因为某些原因导致事务失败或回滚了，可以借助该 undo 进行回滚。&lt;/p&gt;

&lt;p&gt;undo log 和 redo log 记录物理日志不一样，它是逻辑日志。可以认为当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录，反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录。&lt;/p&gt;

&lt;p&gt;当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚。有时候应用到行版本控制的时候，也是通过 undo log 来实现的：当读取的某一行被其他事务锁定时，它可以从 undo log 中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。&lt;/p&gt;

&lt;h4 id=&quot;undo-日志存储方式&quot;&gt;undo 日志存储方式&lt;/h4&gt;
&lt;p&gt;innodb 存储引擎对 undo 的管理采用段的方式。rollback segment 称为回滚段，每个回滚段中有 1024 个 undo log segment。&lt;/p&gt;

&lt;p&gt;在以前老版本，只支持 1 个 rollback segment，这样就只能记录 1024 个 undo log segment。后来 MySQL5.5 可以支持 128 个 rollback segment，即支持 128*1024 个 undo 操作，还可以通过变量 innodb_undo_logs (5.6 版本以前该变量是 innodb_rollback_segments) 自定义多少个 rollback segment，默认值为 128。&lt;/p&gt;

&lt;p&gt;undo log 默认存放在共享表空间中。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@xuexi data]# ll /mydata/data/ibda&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-rw----&lt;/span&gt; 1 mysql mysql 79691776 Mar 31 01:42 /mydata/data/ibdata1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果开启了 innodb_file_per_table ，将放在每个表的.ibd 文件中。&lt;/p&gt;

&lt;p&gt;在 MySQL5.6 中，undo 的存放位置还可以通过变量 innodb_undo_directory 来自定义存放目录，默认值为 “.” 表示 datadir。&lt;/p&gt;

&lt;p&gt;默认 rollback segment 全部写在一个文件中，但可以通过设置变量 innodb_undo_tablespaces 平均分配到多少个文件中。该变量默认值为 0，即全部写入一个表空间文件。该变量为静态变量，只能在数据库示例停止状态下修改，如写入配置文件或启动时带上对应参数。但是 innodb 存储引擎在启动过程中提示，不建议修改为非 0 的值，如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-03-31 13:16:00 7f665bfab720 InnoDB: Expected to open 3 undo tablespaces but was able
2017-03-31 13:16:00 7f665bfab720 InnoDB: to find only 0 undo tablespaces.
2017-03-31 13:16:00 7f665bfab720 InnoDB: Set the innodb_undo_tablespaces parameter to the
2017-03-31 13:16:00 7f665bfab720 InnoDB: correct value and retry. Suggested value is 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;undo-日志参数&quot;&gt;undo 日志参数&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show global variables like &lt;span class=&quot;s1&quot;&gt;'%undo%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------------+------------+
| Variable_name            | Value      |
+--------------------------+------------+
| innodb_max_undo_log_size | 1073741824 |
| innodb_undo_directory    | ./         |
| innodb_undo_log_truncate | OFF        |
| innodb_undo_logs         | 128        |
| innodb_undo_tablespaces  | 3          |
+--------------------------+------------+
 
mysql&amp;gt; show global variables like &lt;span class=&quot;s1&quot;&gt;'%truncate%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------------------------+-------+
| Variable_name                        | Value |
+--------------------------------------+-------+
| innodb_purge_rseg_truncate_frequency | 128   |
| innodb_undo_log_truncate             | OFF   |
+--------------------------------------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;innodb_max_undo_log_size
    &lt;blockquote&gt;
      &lt;p&gt;控制最大 undo tablespace 文件的大小，当启动了 innodb_undo_log_truncate 时，undo tablespace 超过 innodb_max_undo_log_size 阀值时才会去尝试 truncate。该值默认大小为 1G，truncate 后的大小默认为 10M。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_undo_tablespaces
    &lt;blockquote&gt;
      &lt;p&gt;设置 undo 独立表空间个数，范围为 0-128， 默认为 0，0 表示表示不开启独立 undo 表空间 且 undo 日志存储在 ibdata 文件中。该参数只能在最开始初始化 MySQL 实例的时候指定，如果实例已创建，这个参数是不能变动的，如果在数据库配置文 件 .cnf 中指定 innodb_undo_tablespaces 的个数大于实例创建时的指定个数，则会启动失败，提示该参数设置有误。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;innodb_undo_log_truncate
    &lt;blockquote&gt;
      &lt;p&gt;InnoDB 的 purge 线程，根据 innodb_undo_log_truncate 设置开启或关闭、innodb_max_undo_log_size 的参数值，以及 truncate 的频率来进行空间回收和 undo file 的重新初始化。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;该参数生效的前提是，已设置独立表空间且独立表空间个数大于等于 2 个。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;purge 线程在 truncate undo log file 的过程中，需要检查该文件上是否还有活动事务，如果没有，需要把该 undo log file 标记为不可分配，这个时候，undo log 都会记录到其他文件上，所以至少需要 2 个独立表空间文件，才能进行 truncate 操作，标注不可分配后，会创建一个独立的文件 undo__trunc.log，记录现在正在 truncate 某个 undo log 文件，然后开始初始化 undo log file 到 10M，操作结束后，删除表示 truncate 动作的 undo__trunc.log 文件，这个文件保证了即使在 truncate 过程中发生了故障重启数据库服务，重启后，服务发现这个文件，也会继续完成 truncate 操作，删除文件结束后，标识该 undo log file 可分配。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;innodb_purge_rseg_truncate_frequency
    &lt;blockquote&gt;
      &lt;p&gt;用于控制 purge 回滚段的频度，默认为 128。假设设置为 n，则说明，当 Innodb Purge 操作的协调线程 purge 事务 128 次时，就会触发一次 History purge，检查当前的 undo log 表空间状态是否会触发 truncate。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二进制日志&quot;&gt;二进制日志&lt;/h2&gt;
&lt;h3 id=&quot;二进制日志简介&quot;&gt;二进制日志简介&lt;/h3&gt;
&lt;p&gt;MySQL 的二进制日志（binary log）是一个二进制文件，主要记录所有数据库表结构变更（例如 CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的所有操作。二进制日志（binary log）中记录了对 MySQL 数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息，但是它不记录 SELECT、SHOW 等那些不修改数据的 SQL 语句。&lt;/p&gt;

&lt;h3 id=&quot;二进制日志的作用&quot;&gt;二进制日志的作用&lt;/h3&gt;
&lt;p&gt;恢复（recovery）：某些数据的恢复需要二进制日志。例如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行 point-in-time 的恢复。&lt;/p&gt;

&lt;p&gt;复制（replication）：其原理与恢复类似，通过复制和执行二进制日志使一台远程的 MySQL 数据库（一般称为 slave 或者 standby）与一台 MySQL 数据库（一般称为 master 或者 primary）进行实时同步。&lt;/p&gt;

&lt;p&gt;审计（audit）：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。&lt;/p&gt;

&lt;p&gt;除了上面介绍的几个作用外，binlog 对于事务存储引擎的崩溃恢复也有非常重要的作用。在开启 binlog 的情况下，为了保证 binlog 与 redo 的一致性，MySQL 将采用事务的两阶段提交协议。当 MySQL 系统发生崩溃时，事务在存储引擎内部的状态可能为 prepared 和 commit 两种。对于 prepared 状态的事务，是进行提交操作还是进行回滚操作，这时需要参考 binlog：如果事务在 binlog 中存在，那么将其提交；如果不在 binlog 中存在，那么将其回滚，这样就保证了数据在主库和从库之间的一致性。&lt;/p&gt;

&lt;h3 id=&quot;二进制日志文件&quot;&gt;二进制日志文件&lt;/h3&gt;
&lt;p&gt;为了管理所有的 binlog 文件，MySQL 额外创建了一个 base-name.index 文件，它按顺序记录了 MySQL 使用的所有 binlog 文件。如果你想自定义 index 文件的名称，可以设置 log_bin_index=file 参数。千万不要在 mysqld 运行的时候手动修改 index 文件的内容，这样会使 mysqld 产生混乱。&lt;/p&gt;

&lt;h3 id=&quot;二进制日志的开启&quot;&gt;二进制日志的开启&lt;/h3&gt;
&lt;p&gt;如果想开启 binlog，默认关闭，可以在 MySQL 配置文件中通过配置参数 log-bin = [base-name] 启动二进制日志。如果不指定 base-name，则默认二进制日志文件名为主机名，并以自增的数字作为后缀，例如 mysql-bin.000001，所在目录为数据库所在目录（datadir）。顺序说一下，对于二进制文件当满足下面三种情况时会创建新的文件，文件后缀会自增。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件大小达到 max_binlog_size 参数设置值时。&lt;/li&gt;
  &lt;li&gt;执行 flush logs 命令。&lt;/li&gt;
  &lt;li&gt;重启 mysqld 进程。
    &lt;blockquote&gt;
      &lt;p&gt;你可能会有顾虑，当文件后缀从 000001 增长到 999999 时会怎样？有网友测试过，当文件达到 999999 时又会回到 000001，并不会有什么异常。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二进制日志格式&quot;&gt;二进制日志格式&lt;/h3&gt;
&lt;p&gt;binlog 格式分为: STATEMENT、ROW 和 MIXED 三种，详情如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;STATEMENT
    &lt;blockquote&gt;
      &lt;p&gt;STATEMENT 格式的 binlog 记录的是数据库上执行的原生 SQL 语句。这种方式有好处也有坏处。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;好处就是相当简单，简单地记录和执行这些语句，能够让主备保持同步，在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句。另一个好处是二进制日志里的时间更加紧凑，所以相对而言，基于语句的复制模式不会使用太多带宽，同时也节约磁盘空间。并且通过 mysqlbinlog 工具容易读懂其中的内容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;坏处就是同一条 SQL 在主库和从库上执行的时间可能稍微或很大不相同，因此在传输的二进制日志中，除了查询语句，还包括了一些元数据信息，如当前的时间戳。即便如此，还存在着一些无法被正确复制的 SQL。例如，使用 INSERT INTO TB1 VALUE (CUURENT_DATE ()) 这一条使用函数的语句插入的数据复制到当前从服务器上来就会发生变化。存储过程和触发器在使用基于语句的复制模式时也可能存在问题。另外一个问题就是基于语句的复制必须是串行化的。这要求大量特殊的代码，配置，例如 InnoDB 的 next-key 锁等。并不是所有的存储引擎都支持基于语句的复制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;ROW
    &lt;blockquote&gt;
      &lt;p&gt;从 MySQL5.1 开始支持基于行的复制，也就是基于数据的复制，基于行的更改。这种方式会将实际数据记录在二进制日志中，它有其自身的一些优点和缺点，最大的好处是可以正确地复制每一行数据。一些语句可以被更加有效地复制，另外就是几乎没有基于行的复制模式无法处理的场景，对于所有的 SQL 构造、触发器、存储过程等都能正确执行。主要的缺点就是二进制日志可能会很大，而且不直观，所以，你不能使用 mysqlbinlog 来查看二进制日志。也无法通过看二进制日志判断当前执行到那一条 SQL 语句了。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在对于 ROW 格式的二进制日志基本是标配了，主要是因为它的优势远远大于缺点。并且由于 ROW 格式记录行数据，所以可以基于这种模式做一些 DBA 工具，比如数据恢复，不同数据库之间数据同步等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;MIXED
    &lt;blockquote&gt;
      &lt;p&gt;MIXED 也是 MySQL 默认使用的二进制日志记录方式，但 MIXED 格式默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。比如用到 UUID ()、USER ()、CURRENT_USER ()、ROW_COUNT () 等无法确定的函数。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二进制日志参数&quot;&gt;二进制日志参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;max_binlog_size
    &lt;blockquote&gt;
      &lt;p&gt;可以通过 max_binlog_size 参数来限定单个 binlog 文件的大小（默认 1G），如果当前 binlog 文件的大小达到了参数指定的阈值，会创建一个新的 binlog 文件作为当前活跃的 binlog 文件，后续所有对数据库的修改都会记录到新的 binlog 文件中。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于 binlog 文件的大小，有个需要注意的地方是，binlog 文件可能会大于 max_binlog_size 参数设定的阈值。由于一个事务所产生的所有事件必须记录在同一个 binlog 文件中，所以即使 binlog 文件的大小达到 max_binlog_size 参数指定的大小，也要等到当前事务的所有事件全部写入到 binlog 文件中才能切换，这样就会出现 binlog 文件的大小大于 max_binlog_size 参数指定的大小的情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;binlog_cache_size
    &lt;blockquote&gt;
      &lt;p&gt;当使用事务的表存储引擎（如 InnoDB 存储引擎）时，所有未提交（uncommitted）的二进制日志会被记录到一个缓存中去，等该事务提交（committed）时直接将缓冲中的二进制日志写入二进制日志文件，而该缓冲的大小由 binlog_cache_size 决定，默认大小为 32K。此外，binlog_cache_size 是基于会话（session）的，也就是说，当一个线程开始一个事务时，MySQL 会自动分配一个大小为 binlog_cache_size 的缓存，因此该值的设置需要相当小心，不能设置过大。当一个事务的记录大于设定的 binlog_cache_size 时，MySQL 会把缓冲中的日志写入一个临时文件中，因此该值又不能设得太小。通过 SHOW GLOBAL STATUS 命令查看 binlog_cache_use、binlog_cache_disk_use 的状态，可以判断当前 binlog_cache_size 的设置是否合适。binlog_cache_use 记录了使用缓冲写二进制日志的次数，binlog_cache_disk_use 记录了使用临时文件写二进制日志的次数。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;sync_binlog
    &lt;blockquote&gt;
      &lt;p&gt;在 MySQL 5.7 之前版本默认情况下，二进制日志并不是在每次写的时候同步的磁盘（用户可以理解为缓冲写）。因此，当数据库所在的操作系统发生宕机时，可能会有最后一部分数据没有写入二进制文件中，这会给恢复和复制带来问题。参数 sync_binlog=[N] 中的 N 表示每提交多少个事务就进行 binlog 刷新到磁盘。如果将 N 设为 1，即 sync_binlog=1 表示采用同步写磁盘的方式来写二进制日志，每次事务提交时就会刷新 binlog 到磁盘；sync_binlog 为 0 表示刷新 binlog 时间点由操作系统自身来决定，操作系统自身会每隔一段时间就会刷新缓存数据到磁盘；sync_binlog 为 N 表示每 N 个事务提交会进行一次 binlog 刷新。如果使用 Innodb 存储引擎进行复制，并且想得到最大的高可用性，需要将此值设置为 1。不过该值为 1 时，确时会对数据库 IO 系统带来一定的开销。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是，即使将 sync_binlog 设为 1，还是会有一种情况导致问题的发生。当使用 InnoDB 存储引擎时，在一个事务发出 COMMIT 动作之前，由于 sync_binlog 为 1，因此会将二进制日志立即写入磁盘。如果这时已经写入了二进制日志，但是提交还没有发生，并且此时发生了宕机，那么在 MySQL 数据库下次启动时，由于 COMMIT 操作并没有发生，这个事务会被回滚掉。但是二进制日志已经记录了该事务信息，不能被回滚。对于这个问题，MySQL 使用了两阶段提交来解决的，简单说就是对于已经写入到 binlog 文件的事务一定会提交成功， 而没有写入到 binlog 文件的事务就会进行回滚，从而保证二进制日志和 InnoDB 存储引擎数据文件的一致性，保证主从复制的安全。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;binlog-do-db&amp;amp;binlog-ignore-db
    &lt;blockquote&gt;
      &lt;p&gt;参数 binlog-do-db 和 binlog-ignore-db 表示需要写入或者忽略写入哪些库的二进制日志。默认为空，表示需要同步所有库的日志到二进制日志。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;log-slave-update
    &lt;blockquote&gt;
      &lt;p&gt;如果当前数据库是复制中的 slave 角色，则它不会将 master 取得并执行的二进制日志写入自己的二进制日志文件中去。如果需要写入，要设置 log-slave-update。如果需要搭建 master–&amp;gt;slave–&amp;gt;slave 架构的复制，则必须设置该参数。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;binlog-format
    &lt;blockquote&gt;
      &lt;p&gt;binlog_format 参数十分重要，用来设置二进制日志的记录格式，详情参考 (6.5 binlog 格式)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;log_bin_trust_function_creators
    &lt;blockquote&gt;
      &lt;p&gt;默认为 OFF，这个参数开启会限制存储过程、Function、触发器的创建。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;中继日志&quot;&gt;中继日志&lt;/h2&gt;
&lt;h3 id=&quot;什么是-relay-log&quot;&gt;什么是 relay log？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The relay log, like the binary log, consists of a set of numbered files containing events that describe database changes, and an index file that contains the names of all used relay log files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The term “relay log file” generally denotes an individual numbered file containing database events. The term”relay log” collectively denotes the set of numbered relay log files plus the index file
relay log 是复制过程中产生的日志，很多方面都跟 binary log 差不多，区别是: relay log 是从库服务器 I/O 线程将主库服务器的二进制日志读取过来记录到从库服务器本地文件，然后从库的 SQL 线程会读取 relay-log 日志的内容并应用到从库服务器上。&lt;/p&gt;

&lt;h3 id=&quot;relay-log-相关参数&quot;&gt;relay log 相关参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;max_relay_log_size
    &lt;blockquote&gt;
      &lt;p&gt;标记 relay log 允许的最大值，如果该值为 0，则默认值为 max_binlog_size (1G)；如果不为 0，则 max_relay_log_size 则为最大的 relay_log 文件大小；&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log
    &lt;blockquote&gt;
      &lt;p&gt;定义 relay_log 的位置和名称，如果值为空，则默认位置在数据文件的目录，文件名为 host_name-relay-bin.nnnnnn（By default, relay log file names have the form host_name-relay-bin.nnnnnn in the data directory）；&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log_index
    &lt;blockquote&gt;
      &lt;p&gt;同 relay_log，定义 relay_log 的位置和名称；&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log_info_file
    &lt;blockquote&gt;
      &lt;p&gt;设置 relay-log.info 的位置和名称（relay-log.info 记录 MASTER 的 binary_log 的恢复位置和 relay_log 的位置）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log_purge
    &lt;blockquote&gt;
      &lt;p&gt;是否自动清空不再需要中继日志时。默认值为 1 (启用)。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log_recovery
    &lt;blockquote&gt;
      &lt;p&gt;当 slave 从库宕机后，假如 relay-log 损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的 relay-log，并且重新从 master 上获取日志，这样就保证了 relay-log 的完整性。默认情况下该功能是关闭的，将 relay_log_recovery 的值设置为 1 时，可在 slave 从库上开启该功能，建议开启。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;relay_log_space_limit
    &lt;blockquote&gt;
      &lt;p&gt;防止中继日志写满磁盘，这里设置中继日志最大限额。但此设置存在主库崩溃，从库中继日志不全的情况，不到万不得已，不推荐使用；&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;sync_relay_log
    &lt;blockquote&gt;
      &lt;p&gt;这个参数和 sync_binlog 是一样的，当设置为 1 时，slave 的 I/O 线程每次接收到 master 发送过来的 binlog 日志都要写入系统缓冲区，然后刷入 relay log 中继日志里，这样是最安全的，因为在崩溃的时候，你最多会丢失一个事务，但会造成磁盘的大量 I/O。当设置为 0 时，并不是马上就刷入中继日志里，而是由操作系统决定何时来写入，虽然安全性降低了，但减少了大量的磁盘 I/O 操作。这个值默认是 0，可动态修改。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;sync_relay_log_info
    &lt;blockquote&gt;
      &lt;p&gt;这个参数和 sync_relay_log 参数一样，当设置为 1 时，slave 的 I/O 线程每次接收到 master 发送过来的 binlog 日志都要写入系统缓冲区，然后刷入 relay-log.info 里，这样是最安全的，因为在崩溃的时候，你最多会丢失一个事务，但会造成磁盘的大量 I/O。当设置为 0 时，并不是马上就刷入 relay-log.info 里，而是由操作系统决定何时来写入，虽然安全性降低了，但减少了大量的磁盘 I/O 操作。这个值默认是 0，可动态修改。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;完整日志配置文件示例&quot;&gt;完整日志配置文件示例&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;c&quot;&gt;# 全局配置&lt;/span&gt;
port                                          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3306                            &lt;span class=&quot;c&quot;&gt;# 端口&lt;/span&gt;
datadir                                       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/lib/mysql                  &lt;span class=&quot;c&quot;&gt;# 数据存放目录&lt;/span&gt;
socket                                        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/lib/mysql/mysql.sock       &lt;span class=&quot;c&quot;&gt;# 同 host 连接文件&lt;/span&gt;
pid-file                                      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/lib/mysql/mysqld.pid       &lt;span class=&quot;c&quot;&gt;# pid 存储文件&lt;/span&gt;
user                                          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mysql                           &lt;span class=&quot;c&quot;&gt;# 账号配置&lt;/span&gt;
default_storage_engine                        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; InnoDB                          &lt;span class=&quot;c&quot;&gt;# 默认引擎&lt;/span&gt;
symbolic-links                                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0                               &lt;span class=&quot;c&quot;&gt;# 禁用文件软连接&lt;/span&gt;
character-set-client-handshake                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FALSE                           &lt;span class=&quot;c&quot;&gt;# 在客户端字符集和服务端字符集不同的时候将拒绝连接到服务端执行任何操作&lt;/span&gt;
character-set-server                          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; utf8mb4                         &lt;span class=&quot;c&quot;&gt;# 默认字符集&lt;/span&gt;
collation-server                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; utf8mb4_general_ci              &lt;span class=&quot;c&quot;&gt;# 默认字符集编码&lt;/span&gt;
init_connect                                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SET NAMES utf8mb4'&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# 执行第一次查询之前执行此语句，统一字符集&lt;/span&gt;
wait_timeout                                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 31536000                        &lt;span class=&quot;c&quot;&gt;# 连接空闲超时时间，秒&lt;/span&gt;
interactive_timeout                           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 31536000                        &lt;span class=&quot;c&quot;&gt;# 连接空闲超时时间，秒&lt;/span&gt;

skip_name_resolve                                         &lt;span class=&quot;c&quot;&gt;# 关闭域名解析，避免dns导致的请求失败(关闭后要使用IP访问mysql)，mysql 会做正向和反向dns查询。一旦失败就会拒绝连接。&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# innodb 引擎配置&lt;/span&gt;
innodb_buffer_pool_size &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 256M                            &lt;span class=&quot;c&quot;&gt;# 引擎缓冲池大小，根据实际调整&lt;/span&gt;
innodb_log_file_size    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 50M                             &lt;span class=&quot;c&quot;&gt;# 引擎日志文件大小，根据实际调整&lt;/span&gt;
innodb_file_per_table   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1                               &lt;span class=&quot;c&quot;&gt;# 开启独立表空间，开启后每个表都有自已独立的表空间，每个表的数据和索引都会存在自已的表空间中&lt;/span&gt;
innodb_flush_method     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; O_DIRECT                        &lt;span class=&quot;c&quot;&gt;# innodb 使用 O_DIRECT 打开数据文件，使用 fsync () 刷写数据文件跟 redo log&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# LOGGING&lt;/span&gt;
log-error               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/log/mysql-error.log        &lt;span class=&quot;c&quot;&gt;# 错误日志存放位置&lt;/span&gt;
slow_query_log          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ON                              &lt;span class=&quot;c&quot;&gt;# 开启慢日志&lt;/span&gt;
slow_query_log_file     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/log/mysql-slow.log         &lt;span class=&quot;c&quot;&gt;# 慢日志存放位置&lt;/span&gt;
long_query_time         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3                               &lt;span class=&quot;c&quot;&gt;# 慢日志阈值，秒&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# OTHER&lt;/span&gt;
tmp_table_size          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 32M                             &lt;span class=&quot;c&quot;&gt;# 临时表内存缓存大小&lt;/span&gt;
max_heap_table_size     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 32M                             &lt;span class=&quot;c&quot;&gt;# MEMORY 内存引擎的表大小&lt;/span&gt;
max_connections         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100                             &lt;span class=&quot;c&quot;&gt;# 最大连接数&lt;/span&gt;
thread_cache_size       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 50                              &lt;span class=&quot;c&quot;&gt;# 线程池缓存大小&lt;/span&gt;
table_open_cache        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10                              &lt;span class=&quot;c&quot;&gt;# 表文件描述符的缓存大小&lt;/span&gt;
open_files_limit        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 65535                           &lt;span class=&quot;c&quot;&gt;# 文件描述符限制数量&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;client]
default-character-set   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; utf8mb4                         &lt;span class=&quot;c&quot;&gt;# 默认字符集&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql]
default-character-set   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; utf8mb4                         &lt;span class=&quot;c&quot;&gt;# 默认字符集&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Lewin</name></author><category term="mysql" /><category term="log" /><summary type="html">错误日志</summary></entry><entry><title type="html">WebSocket 协议</title><link href="https://lewinz.org/2022/01/14/websocket/" rel="alternate" type="text/html" title="WebSocket 协议" /><published>2022-01-14T00:00:00+08:00</published><updated>2022-01-14T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/14/websocket</id><content type="html" xml:base="https://lewinz.org/2022/01/14/websocket/">&lt;h2 id=&quot;原文地址此文档仅做记载备份&quot;&gt;原文地址，此文档仅做记载备份&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chyingp/p/websocket-deep-in.html&quot;&gt;https://www.cnblogs.com/chyingp/p/websocket-deep-in.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容概览&quot;&gt;内容概览&lt;/h2&gt;
&lt;p&gt;WebSocket 的出现，使得浏览器具备了实时双向通信的能力。本文由浅入深，介绍了 WebSocket 如何建立连接、交换数据的细节，以及数据帧的格式。此外，还简要介绍了针对 WebSocket 的安全攻击，以及协议是如何抵御类似攻击的。&lt;/p&gt;

&lt;h2 id=&quot;什么是-websocket&quot;&gt;什么是 WebSocket&lt;/h2&gt;
&lt;p&gt;HTML5 开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。&lt;/p&gt;

&lt;p&gt;对大部分 web 开发者来说，上面这段描述有点枯燥，其实只要记住几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;WebSocket 可以在浏览器里使用&lt;/li&gt;
  &lt;li&gt;支持双向通信&lt;/li&gt;
  &lt;li&gt;使用很简单&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;有哪些优点&quot;&gt;有哪些优点&lt;/h3&gt;
&lt;p&gt;说到优点，这里的对比参照物是 HTTP 协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;支持双向通信，实时性更强。&lt;/li&gt;
  &lt;li&gt;更好的二进制支持。&lt;/li&gt;
  &lt;li&gt;较少的控制开销。连接创建后，ws 客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有 2~10 字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的 4 字节的掩码。而 HTTP 协议每次通信都需要携带完整的头部。&lt;/li&gt;
  &lt;li&gt;支持扩展。ws 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）
对于后面两点，没有研究过 WebSocket 协议规范的同学可能理解起来不够直观，但不影响对 WebSocket 的学习和使用。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;需要学习哪些东西&quot;&gt;需要学习哪些东西&lt;/h3&gt;
&lt;p&gt;对网络应用层协议的学习来说，最重要的往往就是连接建立过程、数据交换教程。当然，数据的格式是逃不掉的，因为它直接决定了协议本身的能力。好的数据格式能让协议更高效、扩展性更好。&lt;/p&gt;

&lt;p&gt;下文主要围绕下面几点展开：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如何建立连接&lt;/li&gt;
  &lt;li&gt;如何交换数据&lt;/li&gt;
  &lt;li&gt;数据帧格式&lt;/li&gt;
  &lt;li&gt;如何维持连接&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;入门例子&quot;&gt;入门例子&lt;/h2&gt;
&lt;p&gt;在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了 WebSocket 服务端、WebSocket 客户端（网页端）。完整代码可以在 这里 找到。&lt;/p&gt;

&lt;p&gt;这里服务端用了 ws 这个库。相比大家熟悉的 socket.io，ws 实现更轻量，更适合学习的目的。&lt;/p&gt;

&lt;h3 id=&quot;服务端&quot;&gt;服务端&lt;/h3&gt;
&lt;p&gt;代码如下，监听 8080 端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;wss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;server: receive connection.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;server: received: %s&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;客户端&quot;&gt;客户端&lt;/h3&gt;
&lt;p&gt;代码如下，向 8080 端口发起 WebSocket 连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ws://localhost:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ws onopen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;from client: hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ws onmessage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;from server: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;运行结果&quot;&gt;运行结果&lt;/h3&gt;
&lt;p&gt;可分别查看服务端、客户端的日志，这里不展开。&lt;/p&gt;

&lt;p&gt;服务端输出：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server: receive connection.
server: received hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;客户端输出：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;client: ws connection is open
client: received world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;如何建立连接&quot;&gt;如何建立连接&lt;/h2&gt;
&lt;p&gt;前面提到，WebSocket 复用了 HTTP 的握手通道。具体指的是，客户端通过 HTTP 请求与 WebSocket 服务端协商升级协议。协议升级完成后，后续的数据交换则遵照 WebSocket 的协议。&lt;/p&gt;

&lt;h3 id=&quot;客户端申请协议升级&quot;&gt;客户端：申请协议升级&lt;/h3&gt;
&lt;p&gt;首先，客户端发起协议升级请求。可以看到，采用的是标准的 HTTP 报文格式，且只支持 GET 方法。&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Host: localhost:8080
Origin: http://127.0.0.1:3000
Connection: Upgrade
Upgrade: websocket
Sec-WebSocket-Version: 13
Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;重点请求首部意义如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Connection: Upgrade：表示要升级协议&lt;/li&gt;
  &lt;li&gt;Upgrade: websocket：表示要升级到 websocket 协议。&lt;/li&gt;
  &lt;li&gt;Sec-WebSocket-Version: 13：表示 websocket 的版本。如果服务端不支持该版本，需要返回一个 Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。&lt;/li&gt;
  &lt;li&gt;Sec-WebSocket-Key：与后面服务端响应首部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。
注意，上面请求省略了部分非重点请求首部。由于是标准的 HTTP 请求，类似 Host、Origin、Cookie 等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;服务端响应协议升级&quot;&gt;服务端：响应协议升级&lt;/h3&gt;
&lt;p&gt;服务端返回内容如下，状态代码 101 表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 101 Switching Protocols
Connection:Upgrade
Upgrade: websocket
Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：每个 header 都以 \r\n 结尾，并且最后一行加上一个额外的空行 \r\n。此外，服务端回应的 HTTP 状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;sec-websocket-accept-的计算&quot;&gt;Sec-WebSocket-Accept 的计算&lt;/h3&gt;
&lt;p&gt;Sec-WebSocket-Accept 根据客户端请求首部的 Sec-WebSocket-Key 计算出来。&lt;/p&gt;

&lt;p&gt;计算公式为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将 Sec-WebSocket-Key 跟 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 拼接。&lt;/li&gt;
  &lt;li&gt;通过 SHA1 计算出摘要，并转成 base64 字符串。
伪代码如下：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toBase64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;258&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EAFA5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E914&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C5AB0DC85B11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;验证下前面的返回结果：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secWebSocketKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;w4v7O6xFTi36lq3RNcgctw==&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secWebSocketAccept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secWebSocketKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secWebSocketAccept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Oy4NRAQ13jhfONC7bP8dTKb4PTU=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;数据帧格式&quot;&gt;数据帧格式&lt;/h2&gt;
&lt;p&gt;客户端、服务端数据的交换，离不开数据帧格式的定义。因此，在实际讲解数据交换之前，我们先来看下 WebSocket 的数据帧格式。&lt;/p&gt;

&lt;p&gt;WebSocket 客户端、服务端通信的最小单位是帧（frame），由 1 个或多个帧组成一条完整的消息（message）。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;发送端：将消息切割成多个帧，并发送给服务端；&lt;/li&gt;
  &lt;li&gt;接收端：接收消息帧，并将关联的帧重新组装成完整的消息；
本节的重点，就是讲解数据帧的格式。详细定义可参考 RFC6455 5.2 节 。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;数据帧格式概览&quot;&gt;数据帧格式概览&lt;/h3&gt;
&lt;p&gt;下面给出了 WebSocket 数据帧的统一格式。熟悉 TCP/IP 协议的同学对这样的图应该不陌生。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从左到右，单位是比特。比如 FIN、RSV1 各占据 1 比特，opcode 占据 4 比特。&lt;/li&gt;
  &lt;li&gt;内容包括了标识、操作代码、掩码、数据、数据长度等。（下一小节会展开）&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-------+-+-------------+-------------------------------+
 |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
 |I|S|S|S|  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  |A|     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     |             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16/64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           |
 |N|V|V|V|       |S|             |   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;payload &lt;span class=&quot;nv&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;126/127&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   |
 | |1|2|3|       |K|             |                               |
 +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
 |     Extended payload length continued, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;payload len &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 127  |
 + - - - - - - - - - - - - - - - +-------------------------------+
 |                               |Masking-key, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;MASK &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to 1  |
 +-------------------------------+-------------------------------+
 | Masking-key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;continued&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       |          Payload Data         |
 +-------------------------------- - - - - - - - - - - - - - - - +
 :                     Payload Data continued ...                :
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 |                     Payload Data continued ...                |
 +---------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;数据帧格式详解&quot;&gt;数据帧格式详解&lt;/h3&gt;
&lt;p&gt;针对前面的格式概览图，这里逐个字段进行讲解，如有不清楚之处，可参考协议规范，或留言交流。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIN&lt;/strong&gt;：1 个比特。&lt;/p&gt;

&lt;p&gt;如果是 1，表示这是消息（message）的最后一个分片（fragment），如果是 0，表示不是是消息（message）的最后一个分片（fragment）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RSV1, RSV2, RSV3&lt;/strong&gt;：各占 1 个比特。&lt;/p&gt;

&lt;p&gt;一般情况下全为 0。当客户端、服务端协商采用 WebSocket 扩展时，这三个标志位可以非 0，且值的含义由扩展进行定义。如果出现非零的值，且并没有采用 WebSocket 扩展，连接出错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opcode&lt;/strong&gt;: 4 个比特。&lt;/p&gt;

&lt;p&gt;操作代码，Opcode 的值决定了应该如何解析后续的数据载荷（data payload）。如果操作代码是不认识的，那么接收端应该断开连接（fail the connection）。可选的操作代码如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;% x0：表示一个延续帧。当 Opcode 为 0 时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。&lt;/li&gt;
  &lt;li&gt;% x1：表示这是一个文本帧（frame）&lt;/li&gt;
  &lt;li&gt;% x2：表示这是一个二进制帧（frame）&lt;/li&gt;
  &lt;li&gt;% x3-7：保留的操作代码，用于后续定义的非控制帧。&lt;/li&gt;
  &lt;li&gt;% x8：表示连接断开。&lt;/li&gt;
  &lt;li&gt;% x9：表示这是一个 ping 操作。&lt;/li&gt;
  &lt;li&gt;% xA：表示这是一个 pong 操作。&lt;/li&gt;
  &lt;li&gt;% xB-F：保留的操作代码，用于后续定义的控制帧。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mask&lt;/strong&gt;: 1 个比特。&lt;/p&gt;

&lt;p&gt;表示是否要对数据载荷进行掩码操作。从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。&lt;/p&gt;

&lt;p&gt;如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。&lt;/p&gt;

&lt;p&gt;如果 Mask 是 1，那么在 Masking-key 中会定义一个掩码键（masking key），并用这个掩码键来对数据载荷进行反掩码。所有客户端发送到服务端的数据帧，Mask 都是 1。&lt;/p&gt;

&lt;p&gt;掩码的算法、用途在下一小节讲解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payload length&lt;/strong&gt;：数据载荷的长度，单位是字节。为 7 位，或 7+16 位，或 1+64 位。&lt;/p&gt;

&lt;p&gt;假设数 Payload length === x，如果&lt;/p&gt;

&lt;p&gt;x 为 0~126：数据的长度为 x 字节。
x 为 126：后续 2 个字节代表一个 16 位的无符号整数，该无符号整数的值为数据的长度。
x 为 127：后续 8 个字节代表一个 64 位的无符号整数（最高位为 0），该无符号整数的值为数据的长度。
此外，如果 payload length 占用了多个字节的话，payload length 的二进制表达采用网络序（big endian，重要的位在前）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Masking-key&lt;/strong&gt;：0 或 4 字节（32 位）&lt;/p&gt;

&lt;p&gt;所有从客户端传送到服务端的数据帧，数据载荷都进行了掩码操作，Mask 为 1，且携带了 4 字节的 Masking-key。如果 Mask 为 0，则没有 Masking-key。&lt;/p&gt;

&lt;p&gt;备注：载荷数据的长度，不包括 mask key 的长度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payload data&lt;/strong&gt;：(x+y) 字节&lt;/p&gt;

&lt;p&gt;载荷数据：包括了扩展数据、应用数据。其中，扩展数据 x 字节，应用数据 y 字节。&lt;/p&gt;

&lt;p&gt;扩展数据：如果没有协商使用扩展的话，扩展数据数据为 0 字节。所有的扩展都必须声明扩展数据的长度，或者可以如何计算出扩展数据的长度。此外，扩展如何使用必须在握手阶段就协商好。如果扩展数据存在，那么载荷数据长度必须将扩展数据的长度包含在内。&lt;/p&gt;

&lt;p&gt;应用数据：任意的应用数据，在扩展数据之后（如果存在扩展数据），占据了数据帧剩余的位置。载荷数据长度 减去 扩展数据长度，就得到应用数据的长度。&lt;/p&gt;

&lt;h3 id=&quot;掩码算法&quot;&gt;掩码算法&lt;/h3&gt;
&lt;p&gt;掩码键（Masking-key）是由客户端挑选出来的 32 位的随机数。掩码操作不会影响数据载荷的长度。掩码、反掩码操作都采用如下算法：&lt;/p&gt;

&lt;p&gt;首先，假设：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;original-octet-i：为原始数据的第 i 字节。&lt;/li&gt;
  &lt;li&gt;transformed-octet-i：为转换后的数据的第 i 字节。&lt;/li&gt;
  &lt;li&gt;j：为 i mod 4 的结果。&lt;/li&gt;
  &lt;li&gt;masking-key-octet-j：为 mask key 第 j 字节。
算法描述为： original-octet-i 与 masking-key-octet-j 异或后，得到 transformed-octet-i。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;j = i MOD 4
transformed-octet-i = original-octet-i XOR masking-key-octet-j&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;数据传递&quot;&gt;数据传递&lt;/h2&gt;
&lt;p&gt;一旦 WebSocket 客户端、服务端建立连接后，后续的操作都是基于数据帧的传递。&lt;/p&gt;

&lt;p&gt;WebSocket 根据 opcode 来区分操作的类型。比如 0x8 表示断开连接，0x0-0x2 表示数据交互。&lt;/p&gt;

&lt;h3 id=&quot;数据分片&quot;&gt;数据分片&lt;/h3&gt;
&lt;p&gt;WebSocket 的每条消息可能被切分成多个数据帧。当 WebSocket 的接收方收到一个数据帧时，会根据 FIN 的值来判断，是否已经收到消息的最后一个数据帧。&lt;/p&gt;

&lt;p&gt;FIN=1 表示当前数据帧为消息的最后一个数据帧，此时接收方已经收到完整的消息，可以对消息进行处理。FIN=0，则接收方还需要继续监听接收其余的数据帧。&lt;/p&gt;

&lt;p&gt;此外，opcode 在数据交换的场景下，表示的是数据的类型。0x01 表示文本，0x02 表示二进制。而 0x00 比较特殊，表示延续帧（continuation frame），顾名思义，就是完整消息对应的数据帧还没接收完。&lt;/p&gt;

&lt;h3 id=&quot;数据分片例子&quot;&gt;数据分片例子&lt;/h3&gt;
&lt;p&gt;直接看例子更形象些。下面例子来自 MDN，可以很好地演示数据的分片。客户端向服务端两次发送消息，服务端收到消息后回应客户端，这里主要看客户端往服务端发送的消息。&lt;/p&gt;

&lt;h4 id=&quot;第一条消息&quot;&gt;第一条消息&lt;/h4&gt;

&lt;p&gt;FIN=1, 表示是当前消息的最后一个数据帧。服务端收到当前数据帧后，可以处理消息。opcode=0x1，表示客户端发送的是文本类型。&lt;/p&gt;

&lt;h4 id=&quot;第二条消息&quot;&gt;第二条消息&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;FIN=0，opcode=0x1，表示发送的是文本类型，且消息还没发送完成，还有后续的数据帧。&lt;/li&gt;
  &lt;li&gt;FIN=0，opcode=0x0，表示消息还没发送完成，还有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。&lt;/li&gt;
  &lt;li&gt;FIN=1，opcode=0x0，表示消息已经发送完成，没有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。服务端可以将关联的数据帧组装成完整的消息。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client: &lt;span class=&quot;nv&quot;&gt;FIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1, &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
Server: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;process &lt;span class=&quot;nb&quot;&gt;complete &lt;/span&gt;message immediately&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Hi.
Client: &lt;span class=&quot;nv&quot;&gt;FIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, &lt;span class=&quot;nv&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1, &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;and a&quot;&lt;/span&gt;
Server: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;listening, new message containing text started&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Client: &lt;span class=&quot;nv&quot;&gt;FIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, &lt;span class=&quot;nv&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0, &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;happy new&quot;&lt;/span&gt;
Server: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;listening, payload concatenated to previous message&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Client: &lt;span class=&quot;nv&quot;&gt;FIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0, &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;year!&quot;&lt;/span&gt;
Server: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;process &lt;span class=&quot;nb&quot;&gt;complete &lt;/span&gt;message&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Happy new year to you too!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;连接保持--心跳&quot;&gt;连接保持 + 心跳&lt;/h2&gt;
&lt;p&gt;WebSocket 为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的 TCP 通道保持连接没有断开。然而，对于长时间没有数据往来的连接，如果依旧长时间保持着，可能会浪费包括的连接资源。&lt;/p&gt;

&lt;p&gt;但不排除有些场景，客户端、服务端虽然长时间没有数据往来，但仍需要保持连接。这个时候，可以采用心跳来实现。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;发送方 -&amp;gt; 接收方：ping&lt;/li&gt;
  &lt;li&gt;接收方 -&amp;gt; 发送方：pong
ping、pong 的操作，对应的是 WebSocket 的两个控制帧，opcode 分别是 0x9、0xA。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举例，WebSocket 服务端向客户端发送 ping，只需要如下代码（采用 ws 模块）&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ws.ping('', false, true);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;sec-websocket-keyaccept-的作用&quot;&gt;Sec-WebSocket-Key/Accept 的作用&lt;/h2&gt;
&lt;p&gt;前面提到了，Sec-WebSocket-Key/Sec-WebSocket-Accept 在主要作用在于提供基础的防护，减少恶意连接、意外连接。&lt;/p&gt;

&lt;p&gt;作用大致归纳如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;避免服务端收到非法的 websocket 连接（比如 http 客户端不小心请求连接 websocket 服务，此时服务端可以直接拒绝连接）&lt;/li&gt;
  &lt;li&gt;确保服务端理解 websocket 连接。因为 ws 握手阶段采用的是 http 协议，因此可能 ws 连接是被一个 http 服务器处理并返回的，此时客户端可以通过 Sec-WebSocket-Key 来确保服务端认识 ws 协议。（并非百分百保险，比如总是存在那么些无聊的 http 服务器，光3. 处理 Sec-WebSocket-Key，但并没有实现 ws 协议。。。）&lt;/li&gt;
  &lt;li&gt;用浏览器里发起 ajax 请求，设置 header 时，Sec-WebSocket-Key 以及其他相关的 header 是被禁止的。这样可以避免客户端发送 ajax 请求时，意外请求协议升级（websocket upgrade）&lt;/li&gt;
  &lt;li&gt;可以防止反向代理（不理解 ws 协议）返回错误的数据。比如反向代理前后收到两次 ws 连接的升级请求，反向代理把第一次请求的返回给 cache 住，然后第二次请求到来时直接把 cache 住的请求给返回（无意义的返回）。&lt;/li&gt;
  &lt;li&gt;Sec-WebSocket-Key 主要目的并不是确保数据的安全性，因为 Sec-WebSocket-Key、Sec-WebSocket-Accept 的转换计算公式是公开的，而且非常简单，最主要的作用是预防一些常见的意外情况（非故意的）。
    &lt;blockquote&gt;
      &lt;p&gt;强调：Sec-WebSocket-Key/Sec-WebSocket-Accept 的换算，只能带来基本的保障，但连接是否安全、数据是否安全、客户端 / 服务端是否合法的 ws 客户端、ws 服务端，其实并没有实际性的保证。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;数据掩码的作用&quot;&gt;数据掩码的作用&lt;/h2&gt;
&lt;p&gt;WebSocket 协议中，数据掩码的作用是增强协议的安全性。但数据掩码并不是为了保护数据本身，因为算法本身是公开的，运算也不复杂。除了加密通道本身，似乎没有太多有效的保护通信安全的办法。&lt;/p&gt;

&lt;p&gt;那么为什么还要引入掩码计算呢，除了增加计算机器的运算量外似乎并没有太多的收益（这也是不少同学疑惑的点）。&lt;/p&gt;

&lt;p&gt;答案还是两个字：安全。但并不是为了防止数据泄密，而是为了防止早期版本的协议中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。&lt;/p&gt;

&lt;h3 id=&quot;代理缓存污染攻击&quot;&gt;代理缓存污染攻击&lt;/h3&gt;
&lt;p&gt;下面摘自 2010 年关于安全的一段讲话。其中提到了代理服务器在协议实现上的缺陷可能导致的安全问题。猛击出处。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We show, empirically, that the current version of the WebSocket consent mechanism is vulnerable to proxy cache poisoning attacks. Even though the WebSocket handshake is based on HTTP, which should be understood by most network intermediaries, the handshake uses the esoteric “Upgrade” mechanism of HTTP [5]. In our experiment, we find that many proxies do not implement the Upgrade mechanism properly, which causes the handshake to succeed even though subsequent traffic over the socket will be misinterpreted by the proxy.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[TALKING] Huang, L-S., Chen, E., Barth, A., Rescorla, E., and C.
Jackson, “Talking to Yourself for Fun and Profit”, 2010,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在正式描述攻击步骤之前，我们假设有如下参与者：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;攻击者、攻击者自己控制的服务器（简称 “邪恶服务器”）、攻击者伪造的资源（简称 “邪恶资源”）&lt;/li&gt;
  &lt;li&gt;受害者、受害者想要访问的资源（简称 “正义资源”）&lt;/li&gt;
  &lt;li&gt;受害者实际想要访问的服务器（简称 “正义服务器”）&lt;/li&gt;
  &lt;li&gt;中间代理服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攻击步骤一&quot;&gt;攻击步骤一&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;攻击者浏览器 向 邪恶服务器 发起 WebSocket 连接。根据前文，首先是一个协议升级请求。&lt;/li&gt;
  &lt;li&gt;协议升级请求 实际到达 代理服务器。&lt;/li&gt;
  &lt;li&gt;代理服务器 将协议升级请求转发到 邪恶服务器。&lt;/li&gt;
  &lt;li&gt;邪恶服务器 同意连接，代理服务器 将响应转发给 攻击者。
由于 upgrade 的实现上有缺陷，代理服务器 以为之前转发的是普通的 HTTP 消息。因此，当协议服务器 同意连接，代理服务器 以为本次会话已经结束。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;攻击步骤二&quot;&gt;攻击步骤二&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;攻击者 在之前建立的连接上，通过 WebSocket 的接口向 邪恶服务器 发送数据，且数据是精心构造的 HTTP 格式的文本。其中包含了 正义资源 的地址，以及一个伪造的 host（指向正义服务器）。（见后面报文）&lt;/li&gt;
  &lt;li&gt;请求到达 代理服务器 。虽然复用了之前的 TCP 连接，但 代理服务器 以为是新的 HTTP 请求。&lt;/li&gt;
  &lt;li&gt;代理服务器 向 邪恶服务器 请求 邪恶资源。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;邪恶服务器 返回 邪恶资源。代理服务器 缓存住 邪恶资源（url 是对的，但 host 是 正义服务器 的地址）。
到这里，受害者可以登场了：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;受害者 通过 代理服务器 访问 正义服务器 的 正义资源。&lt;/li&gt;
  &lt;li&gt;代理服务器 检查该资源的 url、host，发现本地有一份缓存（伪造的）。&lt;/li&gt;
  &lt;li&gt;代理服务器 将 邪恶资源 返回给 受害者。&lt;/li&gt;
  &lt;li&gt;受害者 卒。
附：前面提到的精心构造的 “HTTP 请求报文”。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client → Server:
POST /path/of/attackers/choice HTTP/1.1 Host: host-of-attackers-choice.com Sec-WebSocket-Key: &amp;lt;connection-key&amp;gt;
Server → Client:
HTTP/1.1 200 OK
Sec-WebSocket-Accept: &amp;lt;connection-key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;当前解决方案&quot;&gt;当前解决方案&lt;/h3&gt;
&lt;p&gt;最初的提案是对数据进行加密处理。基于安全、效率的考虑，最终采用了折中的方案：对数据载荷进行掩码处理。&lt;/p&gt;

&lt;p&gt;需要注意的是，这里只是限制了浏览器对数据载荷进行掩码处理，但是坏人完全可以实现自己的 WebSocket 客户端、服务端，不按规则来，攻击可以照常进行。&lt;/p&gt;

&lt;p&gt;但是对浏览器加上这个限制后，可以大大增加攻击的难度，以及攻击的影响范围。如果没有这个限制，只需要在网上放个钓鱼网站骗人去访问，一下子就可以在短时间内展开大范围的攻击。&lt;/p&gt;

&lt;h2 id=&quot;写在后面&quot;&gt;写在后面&lt;/h2&gt;
&lt;p&gt;WebSocket 可写的东西还挺多，比如 WebSocket 扩展。客户端、服务端之间是如何协商、使用扩展的。WebSocket 扩展可以给协议本身增加很多能力和想象空间，比如数据的压缩、加密，以及多路复用等。&lt;/p&gt;

&lt;p&gt;篇幅所限，这里先不展开，感兴趣的同学可以留言交流。文章如有错漏，敬请指出。&lt;/p&gt;

&lt;h2 id=&quot;相关链接&quot;&gt;相关链接&lt;/h2&gt;
&lt;p&gt;RFC6455：websocket 规范&lt;br /&gt;
https://tools.ietf.org/html/rfc6455&lt;/p&gt;

&lt;p&gt;规范：数据帧掩码细节&lt;br /&gt;
https://tools.ietf.org/html/rfc6455#section-5.3&lt;/p&gt;

&lt;p&gt;规范：数据帧格式&lt;br /&gt;
https://tools.ietf.org/html/rfc6455#section-5.1&lt;/p&gt;

&lt;p&gt;server-example&lt;br /&gt;
https://github.com/websockets/ws#server-example&lt;/p&gt;

&lt;p&gt;编写 websocket 服务器&lt;br /&gt;
https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers&lt;/p&gt;

&lt;p&gt;对网络基础设施的攻击（数据掩码操作所要预防的事情）&lt;br /&gt;
https://tools.ietf.org/html/rfc6455#section-10.3&lt;/p&gt;

&lt;p&gt;Talking to Yourself for Fun and Profit（含有攻击描述）&lt;br /&gt;
http://w2spconf.com/2011/papers/websocket.pdf&lt;/p&gt;

&lt;p&gt;What is Sec-WebSocket-Key for?&lt;br /&gt;
https://stackoverflow.com/questions/18265128/what-is-sec-websocket-key-for&lt;/p&gt;

&lt;p&gt;10.3. Attacks On Infrastructure (Masking)&lt;br /&gt;
https://tools.ietf.org/html/rfc6455#section-10.3&lt;/p&gt;

&lt;p&gt;Talking to Yourself for Fun and Profit&lt;br /&gt;
http://w2spconf.com/2011/papers/websocket.pdf&lt;/p&gt;

&lt;p&gt;Why are WebSockets masked?&lt;br /&gt;
https://stackoverflow.com/questions/33250207/why-are-websockets-masked&lt;/p&gt;

&lt;p&gt;How does websocket frame masking protect against cache poisoning?&lt;br /&gt;
https://security.stackexchange.com/questions/36930/how-does-websocket-frame-masking-protect-against-cache-poisoning&lt;/p&gt;

&lt;p&gt;What is the mask in a WebSocket frame?&lt;br /&gt;
https://stackoverflow.com/questions/14174184/what-is-the-mask-in-a-websocket-frame&lt;/p&gt;</content><author><name>Lewin</name></author><category term="WebSocket" /><summary type="html">原文地址，此文档仅做记载备份 https://www.cnblogs.com/chyingp/p/websocket-deep-in.html</summary></entry><entry><title type="html">nginx 配置文件加载顺序</title><link href="https://lewinz.org/2022/01/12/nginx-config-load/" rel="alternate" type="text/html" title="nginx 配置文件加载顺序" /><published>2022-01-12T00:00:00+08:00</published><updated>2022-01-12T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/12/nginx-config-load</id><content type="html" xml:base="https://lewinz.org/2022/01/12/nginx-config-load/">&lt;p&gt;这几天频繁的创建主机搭建站点，突然碰到个与自己直觉不匹配的情况：&lt;/p&gt;

&lt;p&gt;当没有配置默认的虚拟主机时，用一个无法匹配 server_name 的链接访问服务器时，会如何？&lt;/p&gt;

&lt;p&gt;我直觉认为会显示错误信息。但现实世界是残酷的，nginx 找了一圈都没有匹配后，会直接路由到它找到的第一个配置的虚拟主机上（前提是监听的端口是一样的）。&lt;/p&gt;

&lt;p&gt;何为第一个？是靠虚拟主机的 conf 文件名字的字母表顺序！惊不惊喜？意不意外？？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.kazaff.me/2018/10/17/nginx%E7%9A%84vhost%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/&quot;&gt;博客链接&lt;/a&gt;&lt;/p&gt;</content><author><name>Lewin</name></author><category term="nginx" /><category term="config" /><category term="load" /><summary type="html">这几天频繁的创建主机搭建站点，突然碰到个与自己直觉不匹配的情况：</summary></entry><entry><title type="html">OpenStack 实例宕机恢复</title><link href="https://lewinz.org/2022/01/12/openstack-recover-vm/" rel="alternate" type="text/html" title="OpenStack 实例宕机恢复" /><published>2022-01-12T00:00:00+08:00</published><updated>2022-01-12T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/12/openstack-recover-vm</id><content type="html" xml:base="https://lewinz.org/2022/01/12/openstack-recover-vm/">&lt;h2 id=&quot;环境信息&quot;&gt;环境信息&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;OS –&amp;gt; CentOS7.2-1511&lt;/li&gt;
  &lt;li&gt;OpenStack –&amp;gt; Mikata&lt;/li&gt;
  &lt;li&gt;Ceph –&amp;gt;j 版
虽然 OpenStack 自带有迁移和疏散机制，但并不一定保证 100% 成功，本文基于疏散失败的情况，来恢复实例。&lt;br /&gt;
起因客户那边，物理机系统盘故障，导致数据全部丢失，最开始想到的方法是疏散，直接在 dashboard 或者控制节点终端执行疏散命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nova evacuate  node09&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然而事情并没有到此结束，有 2 台虚拟机，一直疏散不了，没办法，数据最重要，由于 nova，glance，cinder 使用的都是 ceph，即数据都存放在 ceph 中，这样恢复起来就有了可能，&lt;br /&gt;
具体步骤如下：&lt;/p&gt;

&lt;h2 id=&quot;重建-libvirtxml-文件&quot;&gt;重建 libvirt.xml 文件&lt;/h2&gt;
&lt;p&gt;首先查看一下拟机信息
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nova show 6bb3bc65-91c3-486c-b853-2a5c879a5395&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;具体信息如下：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------------------------------------+----------------------------------------------------------+
| Property                             | Value                                                    |
+--------------------------------------+----------------------------------------------------------+
|  network                             | 192.168.10.25, xx.xx.xx.xx                              |
| OS-DCF:diskConfig                    | AUTO                                                     |
| OS-EXT-AZ:availability_zone          | nova                                                     |
| OS-EXT-SRV-ATTR:host                 | node03                                                   |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | node03                                                   |
| OS-EXT-SRV-ATTR:instance_name        | instance-000001ae                                        |
| OS-EXT-STS:power_state               | 1                                                        |
| OS-EXT-STS:task_state                | -                                                        |
| OS-EXT-STS:vm_state                  | active                                                   |
| OS-SRV-USG:launched_at               | 2017-06-23T06:03:20.000000                               |
| OS-SRV-USG:terminated_at             | -                                                        |
| accessIPv4                           |                                                          |
| accessIPv6                           |                                                          |
| config_drive                         |                                                          |
| created                              | 2017-06-23T06:01:44Z                                     |
| flavor                               | yunwei01 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;d76ea4cd-0c46-423c-9a2a-0ab15c5a1b0a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          |
| hostId                               | 7081812a3c654f417fc545300ecd03252d8ac4bf992b54272bcfee61 |
| &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;                                   | 6bb3bc65-91c3-486c-b853-2a5c879a5395                     |
| image                                | centos65 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0488b591-1755-4da0-abe9-8e5c2a6931b5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          |
| key_name                             | -                                                        |
| metadata                             | &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;                                                       |
| name                                 | rhea-2                                                   |
| os-extended-volumes:volumes_attached | &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;7cd2936a-b4ef-4e85-8159-eace4c1b7981&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;         |
| progress                             | 0                                                        |
| security_groups                      | default                                                  |
| status                               | ACTIVE                                                   |
| tenant_id                            | 290f841df5644709847a51d6604a228f                         |
| updated                              | 2017-12-21T06:46:13Z                                     |
| user_id                              | d158732076c740aead5286969273faea                         |
+-------------------------------------+----------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;记录这些信息，后面有大用&lt;/p&gt;

&lt;p&gt;在平台上，找一个 flavor 和 image 相同的实例，找到此实例 uuid&lt;/p&gt;

&lt;p&gt;查看该实例信息
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nova show uuid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;进入到相应节点，拷贝 libvirt.xml 和 console.log&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/lib/nova/instance/&lt;span class=&quot;nv&quot;&gt;$uuid&lt;/span&gt;/
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /mnt/bakrecovery
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt/bakrecovery
more libvirt.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;信息如下：&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;domain&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kvm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;6bb3bc65-91c3-486c-b853-2a5c879a5395&lt;span class=&quot;nt&quot;&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;instance-000001ae&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;16777216&lt;span class=&quot;nt&quot;&gt;&amp;lt;/memory&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;vcpu&amp;gt;&lt;/span&gt;16&lt;span class=&quot;nt&quot;&gt;&amp;lt;/vcpu&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:instance&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:nova=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://openstack.org/xmlns/libvirt/nova/1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;13.1.0-1.el7&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:name&amp;gt;&lt;/span&gt;rhea-2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:creationTime&amp;gt;&lt;/span&gt;2017-12-21 06:46:11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:creationTime&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:flavor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yunwei01&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:memory&amp;gt;&lt;/span&gt;16384&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:memory&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:disk&amp;gt;&lt;/span&gt;40&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:disk&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:swap&amp;gt;&lt;/span&gt;2048&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:swap&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:ephemeral&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:ephemeral&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:vcpus&amp;gt;&lt;/span&gt;16&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:vcpus&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:flavor&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:owner&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3eb5de8526c14da495488f1a264915f6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;admin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:user&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10d0b378c82d4b5da2288ef852ca5bd1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;admin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:project&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:owner&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nova:root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0488b591-1755-4da0-abe9-8e5c2a6931b5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nova:instance&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sysinfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smbios&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manufacturer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Fedora Project&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;OpenStack Nova&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;13.1.0-1.el7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;serial&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;d3c7a080-2534-4b5f-9d86-9cd152acc671&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;6bb3bc65-91c3-486c-b853-2a5c879a5395&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Virtual Machine&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sysinfo&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;os&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;hvm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;boot&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;smbios&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sysinfo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;acpi/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;apic/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cputune&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;shares&amp;gt;&lt;/span&gt;16384&lt;span class=&quot;nt&quot;&gt;&amp;lt;/shares&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cputune&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;clock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;timer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tickpolicy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delay&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;timer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rtc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tickpolicy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;catchup&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;timer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hpet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;present=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/clock&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cpu&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host-model&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exact&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;topology&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sockets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cores=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;threads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cpu&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;devices&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;disk&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;network&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;device=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;driver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;raw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;writeback&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rbd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vms/6bb3bc65-91c3-486c-b853-2a5c879a5395_disk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;auth&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cinder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;secret&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ceph&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14fdf1bb-44d7-40ad-a98a-16fe7e65115b&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/auth&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;virtio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vda&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;disk&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;network&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;device=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;driver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;raw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;writeback&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rbd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vms/6bb3bc65-91c3-486c-b853-2a5c879a5395_disk.swap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;auth&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cinder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;secret&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ceph&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14fdf1bb-44d7-40ad-a98a-16fe7e65115b&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/auth&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;virtio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vdb&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;disk&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;network&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;device=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;driver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qemu&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;raw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;writeback&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rbd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;volumes/volume-7cd2936a-b4ef-4e85-8159-eace4c1b7981&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;172.16.2.7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6789&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;auth&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cinder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;secret&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ceph&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uuid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14fdf1bb-44d7-40ad-a98a-16fe7e65115b&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/auth&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;virtio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vdc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;serial&amp;gt;&lt;/span&gt;7cd2936a-b4ef-4e85-8159-eace4c1b7981&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serial&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;interface&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;mac&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa:16:3e:34:e3:fe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;model&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;virtio&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bridge=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qbrff441fbc-bb&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dev=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tapff441fbc-bb&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;serial&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/var/lib/nova/instances/6bb3bc65-91c3-486c-b853-2a5c879a5395/console.log&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/serial&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;serial&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pty&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tablet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;usb&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;graphics&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vnc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoport=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keymap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-us&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;listen=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;video&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;model&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cirrus&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;memballoon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;virtio&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;stats&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;period=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/memballoon&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/devices&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;需要修改如下部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;name 和 uuid&lt;br /&gt;
``` xml&lt;/li&gt;
&lt;/ol&gt;
&lt;uuid&gt;6bb3bc65-91c3-486c-b853-2a5c879a5395&lt;/uuid&gt;
&lt;name&gt;instance-000001ae&lt;/name&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;前面记录信息，刚好派上用场

2. name 和创建时间  
``` xml
&amp;lt;nova:name&amp;gt;rhea-2&amp;lt;/nova:name&amp;gt;
&amp;lt;nova:creationTime&amp;gt;2017-12-21 06:46:11&amp;lt;/nova:creationTime&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个 name 是创建实例的时候，我们起的名字，上面的那个，是随机生成的名字&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;修改相应 uuid（包括 image，project，user）
``` xml&lt;/li&gt;
&lt;/ol&gt;
&lt;nova:user uuid=&quot;3eb5de8526c14da495488f1a264915f6&quot;&gt;admin&lt;/nova:user&gt;
&lt;nova:project uuid=&quot;10d0b378c82d4b5da2288ef852ca5bd1&quot;&gt;admin&lt;/nova:project&gt;
&lt;p&gt;&amp;lt;/nova:owner&amp;gt;&lt;/p&gt;
&lt;nova:root type=&quot;image&quot; uuid=&quot;0488b591-1755-4da0-abe9-8e5c2a6931b5&quot; /&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
3. 修改虚拟机 uuid，和 serial，serial 通过比对发现，同一个计算节点这个号相同
``` xml
&amp;lt;entry name=&quot;serial&quot;&amp;gt;d3c7a080-2534-4b5f-9d86-9cd152acc671&amp;lt;/entry&amp;gt;
&amp;lt;entry name=&quot;uuid&quot;&amp;gt;6bb3bc65-91c3-486c-b853-2a5c879a5395&amp;lt;/entry&amp;gt;
&amp;lt;entry name=&quot;family&quot;&amp;gt;Virtual Machine&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;块设备 id，格式为虚拟机 uuid_disk,uuid_swap
``` xml&lt;/li&gt;
&lt;/ol&gt;
&lt;source protocol=&quot;rbd&quot; name=&quot;vms/6bb3bc65-91c3-486c-b853-2a5c879a5395_disk&quot; /&gt;

&lt;source protocol=&quot;rbd&quot; name=&quot;vms/6bb3bc65-91c3-486c-b853-2a5c879a5395_disk.swap&quot; /&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
5. 通过 cinder 划分的卷 id
``` xml
&amp;lt;target bus=&quot;virtio&quot; dev=&quot;vdc&quot;/&amp;gt;
&amp;lt;serial&amp;gt;7cd2936a-b4ef-4e85-8159-eace4c1b7981&amp;lt;/serial&amp;gt;
&amp;lt;/disk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;虚拟机网卡 mac 地址，还有端口，这里，mac 地址可通过 dashboard 查看，admin 账户下，管理员–&amp;gt; 网络–&amp;gt;（网络）uuid–&amp;gt; 端口
``` xml&lt;/li&gt;
&lt;/ol&gt;
&lt;interface type=&quot;bridge&quot;&gt;
&lt;mac address=&quot;fa:16:3e:34:e3:fe&quot; /&gt;
&lt;model type=&quot;virtio&quot; /&gt;
&lt;source bridge=&quot;qbrff441fbc-bb&quot; /&gt;
&lt;target dev=&quot;tapff441fbc-bb&quot; /&gt;
```

7. console 日志路径
``` xml
&lt;source path=&quot;/var/lib/nova/instances/6bb3bc65-91c3-486c-b853-2a5c879a5395/console.log&quot; /&gt;
```
8. 对比修改完后，一定要仔细确认，以免出现问题
``` shell
mkdir -p /var/lib/nova/instance/$uuid
cp libvirt.xml  /var/lib/nova/instance/$uuid
cp console.log /var/lib/nova/instance/$uuid
```

## 修改权限
``` shell
chown nova.nova /var/lib/nova/instance/$uuid/xml
chown qemu.qemu /var/lib/nova/instance/$uuid/console.log
```

## 在数据库中修改节点信息
``` shell
update instances set host='node10',node='node10' where uuid='6bb3bc65-91c3-486c-b853-2a5c879a5395';
```

## 重启相应节点 nova-coompute 服务
``` shell
systemctl restart openstack-nova-compute
```

## 启动实例，启动后网络可能不通，这时可以通过迁移来解决，

[博客链接](https://www.its404.com/article/H_haow/80287192)
&lt;/interface&gt;</content><author><name>Lewin</name></author><category term="OpenStack" /><category term="recover" /><category term="instance" /><summary type="html">环境信息 OS –&amp;gt; CentOS7.2-1511 OpenStack –&amp;gt; Mikata Ceph –&amp;gt;j 版 虽然 OpenStack 自带有迁移和疏散机制，但并不一定保证 100% 成功，本文基于疏散失败的情况，来恢复实例。 起因客户那边，物理机系统盘故障，导致数据全部丢失，最开始想到的方法是疏散，直接在 dashboard 或者控制节点终端执行疏散命令</summary></entry><entry><title type="html">端口代理</title><link href="https://lewinz.org/2022/01/12/server-port-proxy/" rel="alternate" type="text/html" title="端口代理" /><published>2022-01-12T00:00:00+08:00</published><updated>2022-01-12T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/12/server-port-proxy</id><content type="html" xml:base="https://lewinz.org/2022/01/12/server-port-proxy/">&lt;h2 id=&quot;术语与约定&quot;&gt;术语与约定&lt;/h2&gt;
&lt;p&gt;本地主机：形式为 IP 或域名，你当前正在使用的这台机器；&lt;br /&gt;
远程主机：形式与本地主机一样。这里的远程并不是指实际的距离有多远，准确地说是另一台；&lt;/p&gt;

&lt;h2 id=&quot;ssh-端口代理&quot;&gt;ssh 端口代理&lt;/h2&gt;
&lt;h3 id=&quot;本地转发&quot;&gt;本地转发&lt;/h3&gt;
&lt;p&gt;指设置代理后，远程主机的端口被映射到本地端口上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/server-port-proxy_1.png&quot; alt=&quot;server-port-proxy_1.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;前置条件&quot;&gt;前置条件&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Host A 能连接 Host B&lt;/li&gt;
  &lt;li&gt;Host A 不能连接到 Host C&lt;/li&gt;
  &lt;li&gt;Host B 能连接到 Host C 相应端口&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;示例&quot;&gt;示例&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Port:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Port root@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP &amp;lt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.SSH.Port&amp;gt;

示例：
Host A: 127.0.0.1
Host B: 10.23.43.1
Host C: 10.23.43.2

ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; :5900:10.23.43.2:5900 root@10.23.43.1
等于
ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; 127.0.0.1:5900:10.23.43.2:5900 root@10.23.43.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22

这时候连接本地 5900 就相当于连接 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 10.23.43.2:5900

其他场景介绍：
1. 机器 Host C 有进程监听 8080 端口，但安全组未放开 8080 端口，则可使用以下命令通过此机器的公网 IP 代理出 8080 端口。
（其他信息：Host C 内网 IP 为 192.168.11.23 ，外网 IP 为 10.23.43.2）

ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; :8080:192.168.11.23:8080 root@10.23.43.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数解释：&lt;br /&gt;
-N 告诉 SSH 客户端，这个连接不需要执行任何命令。仅仅做端口转发&lt;/p&gt;

&lt;p&gt;-f 告诉 SSH 客户端在后台运行&lt;/p&gt;

&lt;p&gt;-L 做本地映射端口，被冒号分割的三个部分含义分别是最后一个参数是我们用来建立隧道的中间机器的 IP 地址 (IP: 18.16.200.134)&lt;/p&gt;

&lt;h3 id=&quot;远程转发&quot;&gt;远程转发&lt;/h3&gt;
&lt;p&gt;指设置代理后，本地的端口被映射到远程主机的端口上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/server-port-proxy_2.png&quot; alt=&quot;server-port-proxy_2.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;前置条件-1&quot;&gt;前置条件&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Host A 没有公网 IP&lt;/li&gt;
  &lt;li&gt;Host A 可以连接到 Host B&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-NR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Port:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host A&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Port root@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.IP &amp;lt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.SSH.Port&amp;gt;

示例：
Host A: 127.0.0.1
Host B: 10.23.43.1

ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; :5900:127.0.0.1:5900 root@10.23.43.1
等于
ssh &lt;span class=&quot;nt&quot;&gt;-NL&lt;/span&gt; 10.23.43.1:5900:127.0.0.1:5900 root@10.23.43.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22

这时候连接 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 10.23.43.1:5900 端口就相当于连接本地 5900

可能适合的场景：
1. 内网渗透
2. vpn 端口转发

注意：
本地 sshd_config 里要打开 AllowTcpForwarding 选项，否则 &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 远程端口转发会失败。
默认转发到远程主机上的端口绑定的是 127.0.0.1，如要绑定 0.0.0.0 需要打开 sshd_config 里的 GatewayPorts 选项。这个选项如果由于权限没法打开也有办法，可配合 ssh &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 将端口绑定到 0.0.0.0。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nc&quot;&gt;nc&lt;/h2&gt;
&lt;h3 id=&quot;nc-的作用&quot;&gt;nc 的作用&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;实现任意 TCP/UDP 端口的侦听，nc 可以作为 server 以 TCP 或 UDP 方式侦听指定端口&lt;/li&gt;
  &lt;li&gt;端口的扫描，nc 可以作为 client 发起 TCP 或 UDP 连接&lt;/li&gt;
  &lt;li&gt;机器之间传输文件&lt;/li&gt;
  &lt;li&gt;机器之间网络测速&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nc 的控制参数不少，常用的几个参数如下所列：&lt;br /&gt;
1) -l&lt;br /&gt;
用于指定 nc 将处于侦听模式。指定该参数，则意味着 nc 被当作 server，侦听并接受连接，而非向其它地址发起连接。&lt;/p&gt;

&lt;p&gt;2) -s&lt;br /&gt;
指定发送数据的源 IP 地址，适用于多网卡机&lt;/p&gt;

&lt;p&gt;3) -u&lt;br /&gt;
指定 nc 使用 UDP 协议，默认为 TCP&lt;/p&gt;

&lt;p&gt;4) -v&lt;br /&gt;
输出交互或出错信息，新手调试时尤为有用&lt;/p&gt;

&lt;p&gt;5) -w&lt;br /&gt;
超时秒数，后面跟数字&lt;/p&gt;

&lt;p&gt;6) -z&lt;br /&gt;
表示 zero，表示扫描时不发送任何数据&lt;/p&gt;

&lt;h3 id=&quot;使用示例&quot;&gt;使用示例&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 测试端口通不通
nc &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &amp;lt;IP&amp;gt; &amp;lt;Port&amp;gt; &lt;span class=&quot;c&quot;&gt;#tcp&lt;/span&gt;
nc &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;IP&amp;gt; &amp;lt;Port&amp;gt; &lt;span class=&quot;c&quot;&gt;# udp&lt;/span&gt;

2. 监听和扫描端口
监听
nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;Port&amp;gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

扫描
nc &lt;span class=&quot;nt&quot;&gt;-vz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 5 &amp;lt;IP&amp;gt; &amp;lt;Port&amp;gt;

3. 收发文件
接受文件端
nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;Port&amp;gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file.txt

发送文件端
nc &amp;lt;IP&amp;gt; &amp;lt;Port&amp;gt; &amp;lt; file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代理场景&quot;&gt;代理场景&lt;/h3&gt;
&lt;p&gt;** nc 命令在第一个远程连接结束后会结束监听。如果需要保持运行，需要添加 -k 参数 **&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;主机&lt;/th&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;192.168.10.100&lt;/td&gt;
      &lt;td&gt;攻击机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kali&lt;/td&gt;
      &lt;td&gt;192.168.19.147&lt;/td&gt;
      &lt;td&gt;跳板机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ubuntu&lt;/td&gt;
      &lt;td&gt;192.168.19.153&lt;/td&gt;
      &lt;td&gt;目标机&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;正向转发1&lt;br /&gt;
macOS 能访问 kali，但是不能访问 Ubuntu。kali 能访问 Ubuntu 任意端口。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目标：macOS 想访问到 Ubuntu 的 22 端口。&lt;br /&gt;
思路：用 kali 做跳板机，把访问 kali 8888 端口的数据转发到 Ubuntu 的 22 端口&lt;br /&gt;
方法：在 kali 上执行一条 nc 转发命令即可&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nc 192.168.19.153 22&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#或者使用管道符&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/pipe &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &amp;lt;/tmp/pipe | nc 192.168.19.153 22 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/pipe
&lt;span class=&quot;c&quot;&gt;#or&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mknod&lt;/span&gt; /tmp/pipe p &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &amp;lt; /tmp/pipe | nc 192.168.19.153 22 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/pipe
此时在 macOS 上用 ssh 连接 kali 的 8888 端口，或者直接在 kali 上 ssh 连接本地 8888 端口，即可登陆 Ubuntu 的 22 端口。

ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 username@192.168.19.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;正向转发2
macOS 能访问 kali，但是不能访问 Ubuntu。Ubuntu 防火墙有过滤，kali 不能访问 Ubuntu 的 22 端口，但是可以访问其他端口如 9999。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目标：macOS 想访问到 Ubuntu 的 22 端口。&lt;br /&gt;
思路：&lt;br /&gt;
目标机器 Ubuntu 上用 nc 把 22 端口转发到 9999 端口
kali 上监听 8888 端口，并使用 nc 把访问 kali 8888 端口的数据转发到 Ubuntu 的 9999 端口
macOS 通过访问 kali 的 8888 端口，即可正向连接到 ubuntu 的 22 端口。
操作：&lt;/p&gt;

&lt;p&gt;目标 Ubuntu：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9999 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nc 127.0.0.1 22&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#如果没有-c参数&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/pipe &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9999 &amp;lt;/tmp/pipe | nc 192.168.19.153 22 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/pipe
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/pipe &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 9999 0&amp;lt;/tmp/pipe | nc localhost 22 | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; /tmp/pipe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;跳板机 kali：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nc 192.168.19.153 9999&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#或者使用管道符&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/pipe &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &amp;lt;/tmp/pipe | nc 192.168.19.153 9999 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/pipe
&lt;span class=&quot;c&quot;&gt;#or&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mknod&lt;/span&gt; /tmp/pipe p &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 &amp;lt;/tmp/pipe | nc 192.168.19.153 9999 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/pipe
攻击机：macOS：

ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888 username@192.168.19.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;h3 id=&quot;端口扫描&quot;&gt;端口扫描&lt;/h3&gt;
&lt;h4 id=&quot;nmap&quot;&gt;nmap&lt;/h4&gt;
&lt;p&gt;参数：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-sP&lt;/td&gt;
      &lt;td&gt;Ping扫描,效率高,返回信息少.  例: nmap -sP 192.168.1.110&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-P0(Pn)&lt;/td&gt;
      &lt;td&gt;无Ping扫描,可以躲避防火墙防护,可以在目标主机禁止ping的情况下使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-PS&lt;/td&gt;
      &lt;td&gt;TCP SYN Ping扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-PA&lt;/td&gt;
      &lt;td&gt;TCP ACK Ping扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PR&lt;/td&gt;
      &lt;td&gt;ARP Ping扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-n&lt;/td&gt;
      &lt;td&gt;禁止DNS反向解析&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-T&lt;/td&gt;
      &lt;td&gt;时序选项, -TO-T5. 用于IDS逃逸,0=&amp;gt;非常慢,1=&amp;gt;缓慢的,2=&amp;gt;文雅的,3=&amp;gt;普通的,4=&amp;gt;快速的,5=&amp;gt;急速的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;指定端口扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-F&lt;/td&gt;
      &lt;td&gt;快速扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-f&lt;/td&gt;
      &lt;td&gt;报文分段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;ip地址欺骗  例 nmap -D RND:5 192.168.1.110  RND:为生成随机ip地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sS&lt;/td&gt;
      &lt;td&gt;TCP SYN 扫描,速度快, 1秒1000次左右.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sT&lt;/td&gt;
      &lt;td&gt;TCP连接扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sU&lt;/td&gt;
      &lt;td&gt;UDP扫描,扫描非常慢,容易被忽视&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sN,-sF&lt;/td&gt;
      &lt;td&gt;隐蔽扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-sI&lt;/td&gt;
      &lt;td&gt;空闲扫描,允许端口完全欺骗,可以允许不使用自身ip的情况下发起扫描,非常之隐蔽的扫描.较为隐蔽.但得先寻找空闲主机,指令为 nmap -p80 -open -script ipidseq 192.168……,第二种是往事随机寻找, nmap -p80 -open -script  ipidseq -iR 2000 (iR选项代表随机选择目标.2000带表选择的数量,-open代表只选择端口开放的空闲主机)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-p-&lt;/td&gt;
      &lt;td&gt;扫描所有端口  1-65535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-top-ports&lt;/td&gt;
      &lt;td&gt;只扫描开发概率最高的端口 后面跟上数值  例  nmap -top-ports  100 , 就是扫描概率最高的前100个端口&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;版本探测相关：
参数 | 描述 
—– | —– 
-sV                  |    版本探测 ,通过相应的端口探测对应的服务,根据服务的指纹识别出相应的版本.
-sV –allports       |    只有使用–allports才能扫描所有的端口,默认情况下回跳过如 TCP9100端口(hp打印机专用端口)
–version-intersity  |    设置扫描强度 0-9 ,数值越大越有可能被识别,花费时间越多,默认是7
–version-ligth      |    扫描强度,轻量级扫描(2) ,等用于–version-intersity 2
–version-all        |    扫描强度,重量级扫描(9)  ,等同于–version-intersity 9
–version-trace      |    获取详细的版本信息
-sR                  |    判断开放端口是否为RPC端口, 如果是返回程序和版本号.
–resaon             |    显示主机存活原因&lt;/p&gt;

&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.Nmap的纯扫描,默认情况下，nmap会发出一个arp ping扫描，且扫描目标tcp端口,范围为1-10000。
nmap 127.0.0.1
2.NMAP普通扫描增加输出冗长（非常详细）
nmap &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; 127.0.0.1
3.端口扫描
nmap 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;指定定单个端口）
nmap 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1-100 （多个端口）
nmap 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;所有端口&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-sP&lt;/span&gt; 10.1.112.89 （Ping扫描）
nmap &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80 （SYN半连接扫描）
nmap &lt;span class=&quot;nt&quot;&gt;-sT&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80  （TCP全连接扫描）
nmap &lt;span class=&quot;nt&quot;&gt;-sU&lt;/span&gt; 127.0.0.1 （UDP扫描）
nmap &lt;span class=&quot;nt&quot;&gt;-sF&lt;/span&gt;  127.0.0.1 （FIN，目标可能有IDS/IPS系统的存在，防火墙可能过滤掉SYN数据包，发送一个FIN标志的数据包不需要完成TCP的握手。）
4.路由追踪
nmap &lt;span class=&quot;nt&quot;&gt;--traceroute&lt;/span&gt; 127.0.0.1
5.nmap设置扫描一个网段下的ip
nmap &lt;span class=&quot;nt&quot;&gt;-sP&lt;/span&gt; 127.0.0.1 /24
6.扫描目标主机版本（不是很准确）
nmap &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80
7.扫描目标服务版本
nmap &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80
8.全面扫描（包含了1-10000端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测）
nmap &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt;
9.保存结果
nmap &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; nmap1
10.nmap命令混合式扫描
nmap &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p1-100&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; 127.0.0.1
11.扫描多个目标
nmap 127.0.0.1 127.0.0.2
nmap 127.0.0.1-100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;扫描IP地址为127.0.0.1-127.0.0.100内的所有主机&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-iL&lt;/span&gt; target.txt （namp在同一目录下,扫描这个txt内的所有主机）

注：使用时请将127.0.0.1更换为目标IP地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;端口占用情况&quot;&gt;端口占用情况&lt;/h3&gt;
&lt;h4 id=&quot;netstat&quot;&gt;netstat&lt;/h4&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-a (all) 显示所有选项，默认不显示 LISTEN 相关&lt;/li&gt;
  &lt;li&gt;-t (tcp) 仅显示 tcp 相关选项&lt;/li&gt;
  &lt;li&gt;-u (udp) 仅显示 udp 相关选项&lt;/li&gt;
  &lt;li&gt;-n 拒绝显示别名，能显示数字的全部转化成数字。&lt;/li&gt;
  &lt;li&gt;-l 仅列出有在 Listen (监听) 的服務状态&lt;/li&gt;
  &lt;li&gt;-p 显示建立相关链接的程序名&lt;/li&gt;
  &lt;li&gt;-r 显示路由信息，路由表&lt;/li&gt;
  &lt;li&gt;-e 显示扩展信息，例如 uid 等&lt;/li&gt;
  &lt;li&gt;-s 按各个协议进行统计&lt;/li&gt;
  &lt;li&gt;-c 每隔一个固定时间，执行该 netstat 命令。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;提示：LISTEN 和 LISTENING 的状态只有用 - a 或者 - l 才能看到&lt;/p&gt;

&lt;p&gt;查看 LISTEN 相关端口 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netstat -nat | grep LISTEN&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;ps&quot;&gt;ps&lt;/h4&gt;
&lt;p&gt;查看相关进程
参数&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a：显示一个终端的所有进程，除会话引线外；&lt;/li&gt;
  &lt;li&gt;u：显示进程的归属用户及内存的使用情况；&lt;/li&gt;
  &lt;li&gt;x：显示没有控制终端的进程；&lt;/li&gt;
  &lt;li&gt;-l：长格式显示更加详细的信息；&lt;/li&gt;
  &lt;li&gt;-e：显示所有进程；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看占用端口的进程 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps aux | grep 6379&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 输出格式&lt;/span&gt;
USER PID %CPU %MEM  VSZ  RSS   TTY STAT START TIME COMMAND
root   1  0.0  0.2 2872 1416   ?   Ss   Jun04 0:02 /sbin/init
root   2  0.0  0.0    0    0   ?    S   Jun04 0:00 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kthreadd]
root   3  0.0  0.0    0    0   ?    S   Jun04 0:00 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;migration/0]
root   4  0.0  0.0    0    0   ?    S   Jun04 0:00 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ksoftirqd/0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Lewin</name></author><category term="server" /><category term="port" /><category term="proxy" /><summary type="html">术语与约定 本地主机：形式为 IP 或域名，你当前正在使用的这台机器； 远程主机：形式与本地主机一样。这里的远程并不是指实际的距离有多远，准确地说是另一台；</summary></entry><entry><title type="html">快照实现</title><link href="https://lewinz.org/2022/01/12/server-snapshoot/" rel="alternate" type="text/html" title="快照实现" /><published>2022-01-12T00:00:00+08:00</published><updated>2022-01-12T00:00:00+08:00</updated><id>https://lewinz.org/2022/01/12/server-snapshoot</id><content type="html" xml:base="https://lewinz.org/2022/01/12/server-snapshoot/">&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;存储网络行业协会 SNIA（StorageNetworking Industry Association）快照的定义：关于指定数据集合的一个完全可用拷贝，该拷贝包括相应数据在某个时间点（拷贝开始的时间点）的映像。快照可以是其所表示的数据的一个副本，也可以是数据的一个复制品。&lt;/p&gt;

&lt;p&gt;需要注意的是：快照是完全可用的拷贝，但不是一份完整的拷贝&lt;/p&gt;

&lt;h2 id=&quot;存储快照的使用场景&quot;&gt;存储快照的使用场景&lt;/h2&gt;
&lt;h3 id=&quot;场景一&quot;&gt;场景一&lt;/h3&gt;
&lt;p&gt;存储快照，是一种数据保护措施，可以对源数据进行一定程度的保护，通俗地讲，可以理解为 —- 后悔药。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_1.png&quot; alt=&quot;snapshoot_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，假设在 t0 时刻，有一份完整的源数据，我们在 t1 时刻，针对这份源数据创建一份快照。&lt;/p&gt;

&lt;p&gt;t2 时刻，若因为各种原因（误操作、系统错误等）导致源数据损毁，那么，我们可以通过回滚（rollback）快照，将源数据恢复至快照创建时的状态（即 t1 时刻），这样，可以尽量降低数据损失（损失的数据，是 t1 到 t2 之间产生的数据）。&lt;/p&gt;

&lt;p&gt;这种功能，常用于银行、公安户籍、科研单位等。操作系统、软件升级或机房设备更替，一般会选择在夜间或其他无生产业务时，进行高危操作，操作前会对数据进行快照，若操作失败，则将快照进行 rollback，将源数据恢复至操作前的状态。&lt;/p&gt;

&lt;h3 id=&quot;场景-2&quot;&gt;场景 2&lt;/h3&gt;
&lt;p&gt;前言中说过，快照是一份完全可用的副本，那么，它完全可以被上层业务当做源数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_2.png&quot; alt=&quot;snapshoot_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，针对源数据，创建快照后，将快照卷映射给其他上层业务，可以用于数据挖掘和开发测试等工作，针对快照的读操作不影响源卷的数据。&lt;/p&gt;

&lt;p&gt;这种功能，常用于直播（视频 &amp;amp; 图片）鉴黄、科研数据模拟开发测试等，比如，视频直播平台需要将某一段时间的视频提供给执法机构进行筛查分析，那么可以通过对特定时间点保存的数据创建快照，将快照映射给执法机构的业务主机去进行挖掘分析。&lt;/p&gt;

&lt;h2 id=&quot;存储快照的实现原理&quot;&gt;存储快照的实现原理&lt;/h2&gt;
&lt;p&gt;目前，快照的实现方式均由各个厂商自行决定，但主要技术分为 2 类，一种是写时拷贝 COW（Copy On Write），另一种，是写重定向 ROW（Redirect On Write）。&lt;/p&gt;

&lt;h3 id=&quot;写时拷贝-cow&quot;&gt;写时拷贝 COW&lt;/h3&gt;
&lt;p&gt;COW (Copy-On-Write)，写时拷贝，也称为写前拷贝。&lt;/p&gt;

&lt;p&gt;创建快照以后，如果源卷的数据发生了变化，那么快照系统会首先将原始数据拷贝到快照卷上对应的数据块中，然后再对源卷进行改写。&lt;/p&gt;

&lt;h4 id=&quot;写操作&quot;&gt;写操作&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_3.gif&quot; alt=&quot;snapshoot_3.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图简要示例，快照创建以后，若上层业务对源卷写数据 X，X 在缓存中排队，快照系统将 X 即将写入的位置（逻辑地址）上的数据 Y，拷贝到快照卷中对应的位置（逻辑地址）上，同时，生成一张映射表，表中一列记录源卷上数据变化的逻辑地址，另一列记录快照卷上数据变化的逻辑地址。我们可以看到，上层业务每下发一个数据块，存储上，发生了两次写操作：一次是源卷将数据写入快照卷（即图中 Y），一次是上层业务将数据写入源卷（即图中 X）。&lt;/p&gt;

&lt;h4 id=&quot;读操作&quot;&gt;读操作&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_4.gif&quot; alt=&quot;snapshoot_4.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，快照卷若映射给上层业务进行数据分析等用途时，针对快照进行读操作时，首先由快照系统判断，上层业务需要读取的数据是否在快照卷中，若在，直接从快照卷读取，若不在，则查询映射表，去对应源卷的逻辑地中读取（这个查表并去源卷读的操作，也叫读重定向）。这一点，恰好就解释了为什么快照是一份完全可用的副本，它没有对源卷进行 100% 的拷贝，但对上层业务来说，却可以将快照看做是和源卷 “一模一样” 的副本。&lt;/p&gt;

&lt;p&gt;针对源卷进行读操作时，与快照卷没有数据交互。&lt;/p&gt;

&lt;p&gt;我们可以看到，快照对源卷的数据具有很好的保护措施，快照可以单独作为一份可以读取的副本，但并没有像简单的镜像那样，一开始就占用了和源卷一样的空间，而是根据创建快照后上层业务产生的数据，来实时占用必需的存储空间。&lt;/p&gt;

&lt;h4 id=&quot;快照回滚rollback&quot;&gt;快照回滚（rollback）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_5.gif&quot; alt=&quot;snapshoot_5.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，回滚操作的前提条件是，锁定源卷（暂停对待回滚的逻辑地址上的 IO 操作），然后通过查映射表，将快照卷上的对应数据回拷到源卷中。&lt;/p&gt;

&lt;h4 id=&quot;快照删除&quot;&gt;快照删除&lt;/h4&gt;
&lt;p&gt;采用 COW 技术的快照，其源卷即保存着完整的实时数据，因此，删除快照时，直接销毁了快照卷和映射表，与源卷不存在数据交互。&lt;/p&gt;

&lt;h3 id=&quot;写时重定向-row&quot;&gt;写时重定向 ROW&lt;/h3&gt;
&lt;p&gt;ROW (Redirect-on-write)，也称为写时重定向。&lt;/p&gt;

&lt;p&gt;创建快照以后，快照系统把对数据卷的写请求重定向给了快照预留的存储空间，直接将新的数据写入快照卷。上层业务读源卷时，创建快照前的数据从源卷读，创建快照后产生的数据，从快照卷读。&lt;/p&gt;

&lt;h4 id=&quot;写操作-1&quot;&gt;写操作&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_6.gif&quot; alt=&quot;snapshoot_6.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图简要示例，快照创建以后，若上层业务对源卷写数据 X，X 在缓存中排队，快照系统判断 X 即将写入源卷的逻辑地址，然后将数据 X 写入快照卷中预留的对应逻辑地址中，同时，将源卷和快照卷的逻辑地址写入映射表，即写重定向。我们可以看到，上层针对源卷写入一个数据块 X，存储上只发生一次写操作，只是写之前进行了重定向。&lt;/p&gt;

&lt;h4 id=&quot;读操作-1&quot;&gt;读操作&lt;/h4&gt;

&lt;p&gt;若快照创建以后，上层业务对源卷进行读，则有两种情况：1）若读取的数据，在创建快照前产生，数据是保存在源卷上的，那么，上层就从源卷进行读取；2）若需要读取的数据是创建快照以后才产生的，那么上层就查询映射表，从快照卷进行读取（即读重定向）。&lt;/p&gt;

&lt;p&gt;若快照创建以后，上层业务对快照卷进行读，同样也有两种情况：1）若读取的数据，在创建快照前产生，数据是保存在源卷上的，那么上层就查询映射表，从源卷进行读取；2）若需要读取的数据是创建快照以后才产生的，那么上层就直接从快照卷进行读取。&lt;/p&gt;

&lt;p&gt;我们可以看到，ROW 快照也是根据创建快照后上层业务产生的数据，来实时占用必需的存储空间。&lt;/p&gt;

&lt;h4 id=&quot;快照回滚rollback-1&quot;&gt;快照回滚（rollback）&lt;/h4&gt;

&lt;p&gt;采用 ROW 技术的快照，其源卷始终保存着快照创建前的完整数据，快照创建后，上层业务产生的数据都写入了快照中，因此，快照的回滚只是取消了对源卷的读重定向操作。通俗地说，就是源卷上没有进行任何数据操作，上层业务对源卷的读，仅限于读源卷（即不会去读取快照卷的数据）。&lt;/p&gt;

&lt;h4 id=&quot;快照删除-1&quot;&gt;快照删除&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_7.gif&quot; alt=&quot;snapshoot_7.gif&quot; /&gt;
采用 ROW 技术的快照，其源卷始终保存着快照创建前的完整数据，快照创建后，上层业务产生的数据都写入了快照中。因此，若要删除快照，必然要先将快照卷中的数据，回拷到源卷中，拷贝完成才能删除，如上图。此时我们可以设想，如果，针对一份源数据，在 18:00 创建了快照，上层业务持续产生大量新的数据，19:00 又创建了快照，20:00 又创建了快照…… 那么，在有多份快照的情况下，如果需要删除快照，就会出现，多个快照向源卷回拷数据的情况，可能导致回拷量非常大，耗时很长。&lt;/p&gt;

&lt;h3 id=&quot;两种技术对比&quot;&gt;两种技术对比&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Lewinz/lewinz.github.io@master/images/posts/snapshoot_8.png&quot; alt=&quot;snapshoot_8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上表，COW 的写时拷贝，导致每次写入都有拷贝操作，大量写入时，源卷的写性能会有所下降，而读源卷是不会受到任何影响的，删除快照时，只是解除了快照和源卷的关系，同时删除了快照卷的数据而已。ROW 在每次写入仅做了重定向操作，这个操作耗时是几乎可以忽略不计的，源卷的写性能几乎不会受到影响，但读源卷时，则需要判断数据是创建快照前还是创建快照后，导致大量读时，性能受到一定影响，比较致命的是，若源卷有多个快照，在删除快照时，所有快照的数据均需要回拷到源卷才可以保证源卷数据的完整性。&lt;/p&gt;</content><author><name>Lewin</name></author><category term="snapshoot" /><summary type="html">定义 存储网络行业协会 SNIA（StorageNetworking Industry Association）快照的定义：关于指定数据集合的一个完全可用拷贝，该拷贝包括相应数据在某个时间点（拷贝开始的时间点）的映像。快照可以是其所表示的数据的一个副本，也可以是数据的一个复制品。</summary></entry><entry><title type="html">gorm/mysql timestamp 异常引发的 debug</title><link href="https://lewinz.org/2021/12/03/mysql-timestamp/" rel="alternate" type="text/html" title="gorm/mysql timestamp 异常引发的 debug" /><published>2021-12-03T00:00:00+08:00</published><updated>2021-12-03T00:00:00+08:00</updated><id>https://lewinz.org/2021/12/03/mysql-timestamp</id><content type="html" xml:base="https://lewinz.org/2021/12/03/mysql-timestamp/">&lt;h2 id=&quot;问题上下文&quot;&gt;问题上下文&lt;/h2&gt;
&lt;p&gt;因为业务需要，写了一个每小时执行一次的自动任务，用来生成每小时的计量数据&lt;br /&gt;
计量表存储的数据为每小时为一个计量单位，需要考虑多节点重复在单个计量周期跑自动任务问题。即需要计量数据进行覆盖。&lt;/p&gt;

&lt;h2 id=&quot;问题细节&quot;&gt;问题细节&lt;/h2&gt;
&lt;p&gt;项目使用 gorm 作为 orm 层框架，测试环境使用 gorm tag 建表，如果使用 time 作为时间字段类型，gorm 默认的 mysql 字段为 datatime(3)&lt;/p&gt;

&lt;p&gt;那么第一个问题来了，datatime(3) 类型是包含毫秒存储在库中，计量自动任务进行去重时，时间过滤不方便，如果在 SQL 中强行转换时间格式进行比较，很不优雅。&lt;/p&gt;

&lt;p&gt;解决方案是使用自定义时间类型 timestamp，在 timestamp 中重写 gorm 方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GormDataType&lt;/code&gt;，并修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt; 方法，设定 gorm 拼接 SQL 的时间格式，如下示例：&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;database/sql/driver&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;strings&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;&quot;github.com/araddon/dateparse&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// TimestampFormatLayout formatlayout, save in mysql&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimestampFormatLayout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2006-01-02 15:04:05&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// New return timestamp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// NewWithTime return a specified time's Timestamp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewWithTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Now returns the current local time.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Unix returns the local Time corresponding to the given Unix time,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Date return time with date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// AutoSet auto set type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Timestamp unix timestamp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Pointer return timestamp point&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// MarshalJSON implements the json.Marshaler interface.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarshalJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// UnmarshalJSON implements the json.Unmarshaler interface.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnmarshalJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// GormDataType gorm type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GormDataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;datetime&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Scan valueof time.Time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;can not convert %v to timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Value insert timestamp into mysql need this function.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixNano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Truncate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，类型问题解决了。但是问题没有这么简单。&lt;/p&gt;

&lt;p&gt;在后来的使用中发现，修改了 GormDataType 方法后，gorm 的自动填充 CreatedAt、UpdatedAt 功能失效，翻看 gorm 源码如下:&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataTyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GormDataTypeInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataTyper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GormDataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TagSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUTOCREATETIME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CreatedAt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoCreateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixTime&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NANO&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoCreateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixNanosecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MILLI&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoCreateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixMillisecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoCreateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixSecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TagSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUTOUPDATETIME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UpdatedAt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoUpdateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixTime&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NANO&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoUpdateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixNanosecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToUpper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MILLI&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoUpdateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixMillisecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoUpdateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixSecond&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TagSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TYPE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现 gorm 填充字段使用的就是 GormDataType 方法去判断。&lt;/p&gt;

&lt;p&gt;解决办法：&lt;br /&gt;
修改 GormDBDataType 方法，还原 GormDataType 方法，能够修改默认数据库字段类型的同时也不会影响字段填充。&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// GormDBDataType gorm type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GormDBDataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gorm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dialector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sqlite&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;datetime&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;postgres&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;datetime&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Lewin</name></author><category term="golang" /><category term="gorm" /><category term="timestamp" /><summary type="html">问题上下文 因为业务需要，写了一个每小时执行一次的自动任务，用来生成每小时的计量数据 计量表存储的数据为每小时为一个计量单位，需要考虑多节点重复在单个计量周期跑自动任务问题。即需要计量数据进行覆盖。</summary></entry></feed>